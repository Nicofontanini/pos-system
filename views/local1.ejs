<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Foodtruck KM11</title>
  <link rel="stylesheet" href="/styles/base.css">
  <link rel="stylesheet" href="/styles/styles.css">
</head>

<body>

  <header class="header">
    <h1>Foodtruck - Empanadas KM11</h1>
    <div class="header-actions">
      <button onclick="window.location.href='/logout'">Cerrar Sesión</button>
      <button id="fullscreenBtn">[ ]</button>
    </div>
    <div class="header-actions">
      <!-- Botón para el dropdown -->
      <div class="dropdown">
        <button class="dropbtn">Acciones</button>
        <div class="dropdown-content">
          <!-- Botones dentro del dropdown -->
          <button onclick="showEmployeeLogModal()">Registrar Ingreso/Egreso</button>
          <!-- <button onclick="showEmployeeLogHistory()">Ver Historial de Asistencia</button> -->
          <button onclick="showHistory()" class="history-button">Historial de Pedidos</button>
          <button onclick="confirmCloseCashRegister()" class="btn-mostrarFormulario">Cierre de Caja</button>
          <!-- <button onclick="showCashRegisterHistoryModal()" class="btn-mostrarFormulario">Consultar Historial de
            Cierres</button> -->
        </div>
      </div>
    </div>
  </header>

  <!-- Sección de Productos -->
  <main class="pos-container">
    <section class="products-section">
      <h2>Productos Disponibles</h2>
      <!-- Selector de categorías -->
      <select id="categoryFilter" onchange="filterProductsByCategory()" class="select">
        <option value="Todas">Todas las Categorías</option>
        <!-- Las opciones de categorías se generarán dinámicamente con JavaScript -->
      </select>

      <ul id="product-list">
        <% products.forEach(product=> { %>
          <li id="product-<%= product.id %>" class="product-item">
            <div class="product-detail">
              <h3>
                <%= product.name %>
              </h3>
              <p>
                <%= product.description %>
              </p>
              <p>Categoría: <%= product.category %>
              </p>
              <p>Stock: <span id="stock-<%= product.id %>">
                  <%= product.stock %>
                </span></p>
              <p>Precio: $<%= product.price %>
              </p>
            </div>
            <% if (product.stock <=5) { %>
              <p class="low-stock">¡Stock bajo!</p>
              <button onclick="sendAlert('<%= product.name %>')" class="alert-button">Enviar alerta</button>
              <% } %>
                <div class="actions">
                  <button onclick="addToCart(<%= product.id %>, '<%= product.name %>', <%= product.price %>)"
                    class="add-button">Agregar</button>
                </div>

                <div id="delete-confirm-<%= product.id %>" class="delete-confirm" style="display: none;">
                  ¿Está seguro de eliminar este producto?
                  <button onclick="deleteProduct(<%= product.id %>)" class="delete-button">Sí, eliminar</button>
                  <button onclick="cancelDelete(<%= product.id %>)" class="alert-button">Cancelar</button>
                </div>
          </li>
          <% }) %>
      </ul>
    </section>

    <!-- Modal de Pago -->
    <section class="cart-section">
      <div id="paymentModal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Procesar Pago</h2>
          <div class="payment-summary">
            <p>Total a pagar: $<span id="modalTotal">0.00</span></p>
            <p>Restante: $<span id="remainingAmount" class="remaining-amount">0.00</span></p>
          </div>

          <!-- Campo para el nombre del pedido -->
          <div class="payment-input">
            <label>Nombre del Cliente:</label>
            <input type="text" id="orderName" placeholder="Ingrese el nombre">
          </div>

          <!-- Botones para seleccionar el vendedor -->
          <div class="payment-options">
            <button id="seller1" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller2" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller3" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller4" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
          </div>

          <div class="payment-options">
            <button onclick="selectPaymentMethod('efectivo')" class="cart-item">Efectivo</button>
            <button onclick="selectPaymentMethod('transferencia')" class="cart-item">Transferencia</button>
            <button onclick="selectPaymentMethod('tarjeta')" class="cart-item">Tarjeta</button>
            <button onclick="selectPaymentMethod('mixto')" class="cart-item">Mixto</button>
          </div>

          <div id="paymentInputs"></div>

          <button id="processPaymentBtn" class="cart-item" disabled>Procesar Pago</button>
          <button id="printOrderBtn" style="display: none;" class="cart-item">Imprimir Pedido</button>
          <!-- Botón para cerrar el modal -->
          <button id="closeModalBtn" class="cart-item" onclick="closeModal()">Cerrar</button>
        </div>
      </div>

      <!-- Modal de Historial -->
      <div id="historyModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeHistoryModal()">&times;</span>
          <h2>Historial de Pedidos</h2>
          <label>Fecha Unica:</label>
          <input type="date" id="filterDate" onchange="filterHistory()">
          <div class="date-range-filter">
            <label for="startDate">Desde:</label>
            <input type="date" id="startDate">

            <label for="endDate">Hasta:</label>
            <input type="date" id="endDate">

            <button onclick="filterHistoryByDateRange()">Filtrar</button>
          </div>
          <div id="historyContainer" class="history-container"></div>
          <button onclick="printHistory()" class="print-button">Imprimir Historial</button>
          <button onclick="downloadExcel()" class="print-button">Descargar Excel</button> <!-- Botón nuevo -->
        </div>
      </div>

      <!-- Sección del carrito -->
      <div class="cart" id="cart">
        <h2>Carrito de Compras</h2>
        <div id="cart-items"></div>
        <p>Total: $<span id="cart-total">0.00</span></p>
        <div class="cart-actions">
          <button onclick="showPaymentModal()" class="checkout-button" id="checkoutButton" disabled>
            Completar Compra
          </button>
        </div>
      </div>
    </section>
  </main>


  <!-- Modal para seleccionar empanadas -->
  <div id="docenaModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeDocenaModal()">&times;</span>
      <h2 id="docenaModalTitle"></h2>
      <div id="empanadasSelection"></div>
      <div class="modal-actions">
        <button onclick="confirmDocenaSelection()" style="padding: 10px;">Confirmar</button>
        <button onclick="closeDocenaModal()" style="padding: 10px;">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Agrega esto con los otros modales -->
  <div id="employeeLogModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeEmployeeLogModal()">&times;</span>
      <h2>Registro de Empleado</h2>
      <div>
        <label for="logEmployeeName">Nombre del Empleado:</label>
        <input type="text" id="logEmployeeName" placeholder="Ingrese el nombre">
      </div>
      <div class="log-actions">
        <button onclick="logEmployeeAction('ingreso')" class="log-button ingreso">Registrar Ingreso</button>
        <button onclick="logEmployeeAction('egreso')" class="log-button egreso">Registrar Egreso</button>
      </div>
    </div>
  </div>

  <script src="/scripts/opencloseModal.js" defer></script>
  <script src="/scripts/dropdown.js" defer></script>
  <script src="/scripts/fullscreenBtn.js" defer></script>
  <script src="/scripts/closeboxConfirme.js" defer></script>
  <script src="/scripts/EmployeeLogModal.js" defer></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();


    function toggleDocenaForm() {
      const form = document.getElementById('docenaForm');
      if (form.style.display === 'none' || !form.style.display) {
        form.style.display = 'block';
        loadEmpanadasForDocena(); // Cargar las empanadas disponibles
      } else {
        form.style.display = 'none';
      }
    }

    function loadEmpanadasForDocena() {
      const empanadasSelection = document.getElementById('empanadasSelection');
      empanadasSelection.innerHTML = ''; // Limpiar el contenedor

      // Obtener las empanadas disponibles (puedes obtenerlas desde tu inventario)
      const empanadas = [
        "Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza",
        "Carne Picante", "Choclo", "Salchicha Alemana", "Capresse",
        "Roquefort", "Vacio Provolone", "Chesse Burger", "Cordero",
        "Trucha", "Ciervo"
      ];

      // Generar las opciones de empanadas
      empanadas.forEach((empanada, index) => {
        const empanadaDiv = document.createElement('div');
        empanadaDiv.innerHTML = `
      <label>${empanada}:</label>
      <input type="number" id="empanada-${index}" min="0" value="0">
    `;
        empanadasSelection.appendChild(empanadaDiv);
      });
    }

    function saveDocena() {
      const docenaName = document.getElementById('docenaName').value;
      const docenaPrice = parseFloat(document.getElementById('docenaPrice').value);
      const docenaStock = parseInt(document.getElementById('docenaStock').value);
      const docenaDescription = document.getElementById('docenaDescription').value;

      // Obtener las cantidades de cada empanada
      const empanadasSelection = document.getElementById('empanadasSelection');
      const empanadasInputs = empanadasSelection.querySelectorAll('input[type="number"]');
      const empanadasDetails = [];

      empanadasInputs.forEach((input, index) => {
        const quantity = parseInt(input.value);
        if (quantity > 0) {
          empanadasDetails.push({
            name: input.previousElementSibling.textContent.replace(':', '').trim(),
            quantity: quantity
          });
        }
      });

      // Validar que se hayan seleccionado empanadas
      if (empanadasDetails.length === 0) {
        document.getElementById('docenaFormError').textContent = 'Debes seleccionar al menos una empanada.';
        document.getElementById('docenaFormError').style.display = 'block';
        return;
      }

      // Crear el objeto de la nueva docena
      const newDocena = {
        name: docenaName,
        category: "Docena",
        price: docenaPrice,
        stock: docenaStock,
        description: docenaDescription,
        details: empanadasDetails
      };

      // Enviar la nueva docena al servidor (usando Socket.IO o fetch)
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('add-docena', { local, docena: newDocena });

      // Limpiar el formulario
      cancelDocena();
      alert('Docena agregada correctamente.');
    }

    function cancelDocena() {
      document.getElementById('docenaForm').reset();
      document.getElementById('docenaFormError').style.display = 'none';
    }

    const docenas = {
      "Docena Tradicionales": ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana", "Capresse"],
      "Docena Especiales": ["4 Quesos", "Crudo", "Vegana", "Panceta y Ciruela", "J Roque"],
      "Docena Vacio": ["Vacio Provolone", "Chesse Burger"],
      "Docena Imperdibles": ["Cordero", "Trucha", "Ciervo"],
      "Docena Combinada 1": {
        tipo: "combinada",
        combinaciones: [
          { nombre: "Tradicionales", cantidad: 3, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana", "Capresse"] },
          { nombre: "Especiales", cantidad: 3, opciones: ["4 Quesos", "Crudo", "Vegana", "Panceta y Ciruela", "J Roque"] },
          { nombre: "Vacio", cantidad: 3, opciones: ["Vacio Provolone", "Chesse Burger"] },
          { nombre: "Imperdibles", cantidad: 3, opciones: ["Cordero", "Trucha", "Ciervo"] }
        ]
      },
      "Docena Combinada 2": {
        tipo: "combinada",
        combinaciones: [
          { nombre: "Tradicionales", cantidad: 4, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana", "Capresse"] },
          { nombre: "Especiales", cantidad: 4, opciones: ["4 Quesos", "Crudo", "Vegana", "Panceta y Ciruela", "J Roque"] },
          { nombre: "Imperdibles", cantidad: 4, opciones: ["Cordero", "Trucha", "Ciervo"] }
        ]
      },
    };

    // Determinar el local actual
    const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';
    let orderName = ''; // Variable para almacenar el nombre del pedido
    let selectedSeller = ''; // Variable para almacenar el vendedor seleccionado
    let totalPayments = 0; // Contador de pagos procesados
    let totalAmount = 0;   // Monto total generado

    // Escuchar el evento cart-updated
    socket.on('cart-updated', function ({ local, cart: updatedCart }) {
      // Solo actualizar si el carrito pertenece al local actual
      if (local === (window.location.pathname.includes('local1') ? 'local1' : 'local2')) {
        cart = updatedCart; // Actualizar el carrito local
        updateCartUI(); // Actualizar la interfaz
      }
    });

// Función para agregar productos al carrito

    function addToCart(productId, productName, productPrice) {
      const docenaType = Object.keys(docenas).find(docena => productName.includes(docena));

      if (docenaType) {
        currentDocena = {
          id: productId,
          name: productName,
          price: productPrice,
          type: docenaType,
          config: docenas[docenaType]
        };

        openDocenaModal(currentDocena);
      } else {
        // Si no es una docena, agregar el producto normalmente
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: null
          }
        });
      }
    }

    function openDocenaModal(docena) {
      const modal = document.getElementById('docenaModal');
      const title = document.getElementById('docenaModalTitle');
      const selection = document.getElementById('empanadasSelection');

      title.textContent = `Seleccionar empanadas para ${docena.name}`;
      selection.innerHTML = '';

      if (docena.config.tipo === 'combinada') {
        // Si es una docena combinada, mostrar los grupos
        docena.config.combinaciones.forEach((grupo, grupoIndex) => {
          const grupoDiv = document.createElement('div');
          grupoDiv.className = 'grupo-empanadas';
          grupoDiv.innerHTML = `<h4>${grupo.nombre} (${grupo.cantidad} unidades)</h4>`;

          grupo.opciones.forEach((empanada, empanadaIndex) => {
            const empanadaDiv = document.createElement('div');
            empanadaDiv.className = 'empanada-item';
            empanadaDiv.innerHTML = `
          <span>${empanada}</span>
          <div>
            <button onclick="decrementEmpanada(${grupoIndex}, ${empanadaIndex})">-</button>
            <span id="empanada-${grupoIndex}-${empanadaIndex}-quantity">0</span>
            <button onclick="incrementEmpanada(${grupoIndex}, ${empanadaIndex}, ${grupo.cantidad})">+</button>
          </div>
        `;
            grupoDiv.appendChild(empanadaDiv);
          });

          selection.appendChild(grupoDiv);
        });
      } else {
        // Si es una docena normal, mostrar todas las empanadas
        docena.config.forEach((empanada, index) => {
          const empanadaDiv = document.createElement('div');
          empanadaDiv.className = 'empanada-item';
          empanadaDiv.innerHTML = `
        <span>${empanada}</span>
        <div>
          <button onclick="decrementEmpanada(0, ${index})">-</button>
          <span id="empanada-0-${index}-quantity">0</span>
          <button onclick="incrementEmpanada(0, ${index}, 12)">+</button>
        </div>
      `;
          selection.appendChild(empanadaDiv);
        });
      }

      modal.style.display = 'block';
    }

    function closeDocenaModal() {
      document.getElementById('docenaModal').style.display = 'none';
      currentDocena = null;
    }

    function incrementEmpanada(grupoIndex, empanadaIndex, maxQuantity) {
      const quantityElement = document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`);
      let quantity = parseInt(quantityElement.textContent);

      // Verificar que no se exceda la cantidad máxima permitida
      const totalSelected = getTotalSelectedForGroup(grupoIndex);
      if (totalSelected < maxQuantity) {
        quantity += 1;
        quantityElement.textContent = quantity;
      } else {
        alert(`No puedes seleccionar más de ${maxQuantity} unidades en este grupo.`);
      }
    }

    function decrementEmpanada(grupoIndex, empanadaIndex) {
      const quantityElement = document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`);
      let quantity = parseInt(quantityElement.textContent);
      if (quantity > 0) {
        quantity -= 1;
        quantityElement.textContent = quantity;
      }
    }

    function getTotalSelectedForGroup(grupoIndex) {
      let total = 0;
      const grupoDiv = document.querySelectorAll(`#empanadasSelection .grupo-empanadas`)[grupoIndex];
      if (grupoDiv) {
        const quantityElements = grupoDiv.querySelectorAll('span[id$="-quantity"]');
        quantityElements.forEach(element => {
          total += parseInt(element.textContent);
        });
      }
      return total;
    }

    function confirmDocenaSelection() {
      const grupos = [];
      let isValid = true;

      if (currentDocena.config.tipo === 'combinada') {
        // Para docenas combinadas, validar cada grupo
        currentDocena.config.combinaciones.forEach((grupo, grupoIndex) => {
          const empanadas = [];
          let totalSelected = 0;

          grupo.opciones.forEach((empanada, empanadaIndex) => {
            const quantity = parseInt(document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`).textContent);
            if (quantity > 0) {
              empanadas.push({ name: empanada, quantity });
              totalSelected += quantity;
            }
          });

          if (totalSelected !== grupo.cantidad) {
            alert(`Debes seleccionar exactamente ${grupo.cantidad} unidades en el grupo "${grupo.nombre}".`);
            isValid = false;
          }

          grupos.push({
            grupo: grupo.nombre,
            empanadas: empanadas
          });
        });
      } else {
        // Para docenas normales, validar el total de empanadas
        const empanadas = [];
        let totalSelected = 0;

        currentDocena.config.forEach((empanada, index) => {
          const quantity = parseInt(document.getElementById(`empanada-0-${index}-quantity`).textContent);
          if (quantity > 0) {
            empanadas.push({ name: empanada, quantity });
            totalSelected += quantity;
          }
        });

        if (totalSelected !== 12) {
          alert('Debes seleccionar exactamente 12 empanadas.');
          isValid = false;
        }

        grupos.push({
          grupo: 'Docena',
          empanadas: empanadas
        });
      }

      if (isValid) {
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: currentDocena.id,
            name: currentDocena.name,
            price: currentDocena.price,
            quantity: 1,
            details: grupos.flatMap(g => g.empanadas),
            gruposDetalle: grupos // Mantener los grupos para mejor visualización
          }
        });
        closeDocenaModal();
      }
    }

    function obtenerEmpanadaDeCombinacion(nombreGrupo, opcionesDisponibles, cantidadRequerida) {
      const empanadas = opcionesDisponibles.map(name => ({ name, quantity: 0 }));
      let totalSelected = 0;

      // Pedir al usuario que ingrese la cantidad de cada empanada
      while (totalSelected < cantidadRequerida) {
        let message = `Seleccione ${cantidadRequerida} empanadas de "${nombreGrupo}" (seleccionadas: ${totalSelected}/${cantidadRequerida}):\n`;
        empanadas.forEach((empanada, index) => {
          message += `${index + 1}. ${empanada.name}: ${empanada.quantity} unidades\n`;
        });

        const input = prompt(message + "\n\nIngrese el número de la empanada y la cantidad (ej: 1 2):");

        if (input === null) {
          // Si el usuario cancela, devolver null
          return null;
        }

        const [empanadaIndex, quantity] = input.split(" ").map(Number);
        if (
          empanadaIndex >= 1 &&
          empanadaIndex <= empanadas.length &&
          quantity >= 0 &&
          quantity <= cantidadRequerida - totalSelected
        ) {
          empanadas[empanadaIndex - 1].quantity += quantity;
          totalSelected += quantity;
        } else {
          alert(`Entrada inválida. Asegúrese de ingresar un número válido y una cantidad que no exceda las ${cantidadRequerida - totalSelected} unidades restantes.`);
        }
      }

      // Filtrar solo las empanadas con cantidad > 0
      return empanadas.filter(empanada => empanada.quantity > 0);
    }

    // Función para incrementar la cantidad de un producto
    function incrementProduct(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('increment-product', { local, productId });
    }

    // Función para decrementar la cantidad de un producto
    function decrementProduct(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('decrement-product', { local, productId });
    }

    // Función para eliminar un producto del carrito
    function removeFromCart(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('remove-from-cart', { local, productId });
    }

    // Función para actualizar la interfaz del carrito
    function updateCartUI() {
      const cartItemsElement = document.getElementById('cart-items');
      const cartTotalElement = document.getElementById('cart-total');
      const checkoutButton = document.getElementById('checkoutButton');

      cartItemsElement.innerHTML = ''; // Limpiar el carrito antes de actualizar
      let total = 0;

      // Recorrer los productos en el carrito
      cart.forEach((item) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'cart-item';
        itemElement.innerHTML = `
      <p>${item.name} - $${item.price} x ${item.quantity}</p>
      <button onclick="decrementProduct(${item.id})">-</button>
      <span>${item.quantity}</span>
      <button onclick="incrementProduct(${item.id})">+</button>
      <button onclick="removeFromCart(${item.id})">Eliminar</button>
    `;
        cartItemsElement.appendChild(itemElement);
        total += item.price * item.quantity; // Calcular el total
      });

      cartTotalElement.textContent = total.toFixed(2); // Actualizar el total
      checkoutButton.disabled = cart.length === 0; // Habilitar/deshabilitar el botón de compra
    }

    // Script para manejar el carrito y el pago
    document.addEventListener('DOMContentLoaded', function () {
      // Botón de checkout
      const checkoutButton = document.getElementById('checkoutButton');
      const modal = document.getElementById('paymentModal');
      const closeBtn = modal.querySelector('.close');
      const processPaymentBtn = document.getElementById('processPaymentBtn');

      // Event Listeners
      checkoutButton.addEventListener('click', showPaymentModal);
      closeBtn.addEventListener('click', closePaymentModal);
      processPaymentBtn.addEventListener('click', processPayment);
    });

    // Socket event listeners
    socket.on('product-added', function (data) {
      if (data.location === 'local1') {
        location.reload();
      }
    });

    socket.on('product-updated', function (data) {
      if (data.location === 'local1') {
        location.reload();
      }
    });

    socket.on('product-deleted', function (data) {
      if (data.location === 'local1') {
        const element = document.getElementById(`product-${data.productId}`);
        if (element) element.remove();
      }
    });

    socket.on('stock-update', function ({ local, items }) {
      // Verifica si el local es el correcto según la URL de la página
      const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      if (local === currentLocal) {
        // Recorre los items actualizados
        items.forEach(item => {
          const stockElement = document.getElementById(`stock-${item.id}`);
          const productElement = document.getElementById(`product-${item.id}`);

          if (stockElement && productElement) {
            // Determina el nivel de stock actual
            const currentStock = item.product && item.product.stock !== undefined
              ? item.product.stock
              : (item.newStock !== undefined ? item.newStock : null);

            // Actualiza el stock en la interfaz
            stockElement.textContent = currentStock !== null
              ? currentStock
              : "Stock actualizado";

            // Verifica si el stock es bajo (menor o igual a 5)
            const isLowStock = currentStock !== null && currentStock <= 5;

            // Busca si ya existe la advertencia o el botón
            const existingWarning = productElement.querySelector('.low-stock');
            const existingButton = productElement.querySelector('button[onclick*="sendAlert"]');

            if (isLowStock) {
              // Si el stock es bajo, agrega una advertencia si no existe
              if (!existingWarning) {
                const warning = document.createElement('p');
                warning.className = 'low-stock';
                warning.textContent = `¡Stock bajo! (${currentStock} unidades)`;
                warning.style.color = 'red';
                warning.style.fontWeight = 'bold';
                productElement.appendChild(warning);
              } else {
                // Actualiza el texto de advertencia existente
                existingWarning.textContent = `¡Stock bajo! (${currentStock} unidades)`;
              }

              // Si el botón de alerta no existe, lo agregamos
              if (!existingButton && currentLocal === 'local1') {
                const productName = productElement.querySelector('h3').textContent;
                const alertButton = document.createElement('button');
                alertButton.textContent = 'Enviar alerta a Local 2';
                alertButton.className = 'alert-button';
                alertButton.onclick = function () {
                  sendAlert(productName, currentStock);
                };
                productElement.appendChild(alertButton);
              }
            } else {
              // Si el stock no es bajo, eliminamos la advertencia y el botón si existen
              if (existingWarning) existingWarning.remove();
              if (existingButton) existingButton.remove();
            }
          }
        });
      }
    });

    // Función mejorada para enviar alerta
    function sendAlert(productName, stockLevel) {
      const alertData = {
        productName: productName,
        stockLevel: stockLevel,
        localFrom: window.location.pathname.includes('local1') ? 'Local 1' : 'Local 2',
        timestamp: new Date().toISOString() // Agregar una marca de tiempo
      };

      socket.emit('send-alert-to-local2', alertData);

      // Mostrar mensaje de envío en proceso
      showNotification('Enviando alerta por email...', 'info');
    }

    // Escuchar respuesta del servidor sobre el envío del email
    socket.on('alert-email-status', function (response) {
      if (response.success) {
        showNotification('Alerta enviada correctamente por email', 'success');
      } else {
        showNotification('Error al enviar la alerta por email', 'error');
      }
    });

    // Función auxiliar para mostrar notificaciones
    function showNotification(message, type = 'info', duration = 5000) {
      // Verificar si ya existe el contenedor de notificaciones
      let notifContainer = document.getElementById('notification-container');

      if (!notifContainer) {
        notifContainer = document.createElement('div');
        notifContainer.id = 'notification-container';
        notifContainer.style.position = 'fixed';
        notifContainer.style.top = '10px';
        notifContainer.style.right = '10px';
        notifContainer.style.zIndex = '9999';
        document.body.appendChild(notifContainer);
      }

      // Crear la notificación
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.innerHTML = `
    <div style="padding: 15px; margin-bottom: 10px; border-radius: 4px; background-color: ${type === 'success' ? '#d4edda' :
          type === 'error' ? '#f8d7da' :
            type === 'warning' ? '#fff3cd' : '#cce5ff'
        }; color: ${type === 'success' ? '#155724' :
          type === 'error' ? '#721c24' :
            type === 'warning' ? '#856404' : '#004085'
        }; border: 1px solid ${type === 'success' ? '#c3e6cb' :
          type === 'error' ? '#f5c6cb' :
            type === 'warning' ? '#ffeeba' : '#b8daff'
        };">
      ${message}
      <span style="float: right; cursor: pointer; font-weight: bold;" onclick="this.parentElement.parentElement.remove();">&times;</span>
    </div>
  `;

      notifContainer.appendChild(notification);

      // Eliminar después del tiempo especificado
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, duration);
    }

    // Función para cargar las categorías
    function loadCategories() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      fetch(`/get-categories/${local}`)
        .then(response => response.json())
        .then(categories => {
          const categoryFilter = document.getElementById('categoryFilter');
          categoryFilter.innerHTML = '<option value="Todas">Todas las Categorías</option>';

          categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
          });
        })
        .catch(error => console.error('Error al cargar las categorías:', error));
    }

    // Llamar a la función cuando la página cargue
    document.addEventListener('DOMContentLoaded', loadCategories);

    // Función para filtrar productos por categoría
    function filterProductsByCategory() {
      const selectedCategory = document.getElementById('categoryFilter').value;
      const productList = document.getElementById('product-list');
      const products = productList.querySelectorAll('.product-item');

      products.forEach(product => {
        const productCategory = product.querySelector('p:nth-child(3)').textContent.replace('Categoría: ', '').trim();
        if (selectedCategory === 'Todas' || productCategory === selectedCategory) {
          product.style.display = 'block'; // Mostrar el producto
        } else {
          product.style.display = 'none'; // Ocultar el producto
        }
      });
    }

    // Función para registrar acción
    function logEmployeeAction(action) {
      const employeeName = document.getElementById('logEmployeeName').value;
      if (!employeeName) {
        alert('Por favor ingrese el nombre del empleado');
        return;
      }

      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      fetch('/log-employee', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Local': local
        },
        body: JSON.stringify({ employeeName, action })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert(`Registro de ${action} exitoso para ${employeeName}`);
            document.getElementById('logEmployeeName').value = '';
            closeEmployeeLogModal();
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al registrar la acción');
        });
    }

    // Función para cargar los logs
    function loadEmployeeLogs() {
      const startDate = document.getElementById('logStartDate').value;
      const endDate = document.getElementById('logEndDate').value;
      const employeeName = document.getElementById('logEmployeeFilter').value;

      let url = '/get-employee-logs?';
      if (startDate) url += `startDate=${startDate}&`;
      if (endDate) url += `endDate=${endDate}&`;
      if (employeeName) url += `employeeName=${employeeName}&`;

      fetch(url)
        .then(response => response.json())
        .then(logs => {
          const container = document.getElementById('employeeLogsContainer');
          container.innerHTML = '';

          if (logs.length === 0) {
            container.innerHTML = '<p>No se encontraron registros</p>';
            return;
          }

          logs.forEach(log => {
            const logElement = document.createElement('div');
            logElement.className = `log-entry ${log.action}`;

            const date = new Date(log.timestamp);

            logElement.innerHTML = `
          <div class="log-entry-info">
            <strong>${log.employeeName}</strong> - ${log.action === 'ingreso' ? 'Ingresó' : 'Salió'}
            <div class="log-entry-time">
              ${date.toLocaleDateString()} ${date.toLocaleTimeString()} - ${log.local}
            </div>
          </div>
        `;

            container.appendChild(logElement);
          });
        });
    }

    // Escuchar actualizaciones en tiempo real
    socket.on('employee-log-updated', function (newLog) {
      // Si el modal de historial está abierto, actualizar
      if (document.getElementById('employeeLogHistoryModal').style.display === 'block') {
        loadEmployeeLogs();
      }
    });

    // Agregar esto junto a los otros manejadores de socket
    socket.on('sellers-updated', (sellers) => {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const localSellers = sellers[local];

      for (let i = 1; i <= 4; i++) {
        const button = document.getElementById(`seller${i}`);
        if (button) {
          const seller = localSellers[`vendedor${i}`];
          const sellerName = seller ? (typeof seller === 'object' ? seller.name : seller) : 'Vacío';
          button.textContent = sellerName;
          button.disabled = sellerName === 'Vacío';
        }
      }
    });

    // Cargar vendedores al inicio
    fetch('/get-current-sellers')
      .then(response => response.json())
      .then(sellers => {
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        const localSellers = sellers[local];

        for (let i = 1; i <= 4; i++) {
          const button = document.getElementById(`seller${i}`);
          if (button) {
            const seller = localSellers[`vendedor${i}`];
            const sellerName = seller ? (typeof seller === 'object' ? seller.name : seller) : 'Vacío';
            button.textContent = sellerName;
            button.disabled = sellerName === 'Vacío';
          }
        }
      })
      .catch(error => console.error('Error loading sellers:', error));

    // Agregar cerca del inicio del script, después de la declaración del socket
    function loadCurrentSellers() {
      fetch('/get-current-sellers')
        .then(response => response.json())
        .then(sellers => {
          const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
          const localSellers = sellers[local];

          // Actualizar los botones de vendedor
          for (let i = 1; i <= 4; i++) {
            const button = document.getElementById(`seller${i}`);
            if (button) {
              const sellerName = getSellerName(localSellers[`vendedor${i}`]);
              button.textContent = sellerName || 'Vacío';
              button.disabled = !sellerName;
            }
          }
        })
        .catch(error => console.error('Error loading sellers:', error));
    }

    // Cargar vendedores al iniciar la página
    document.addEventListener('DOMContentLoaded', loadCurrentSellers);

    // Actualizar cuando se reciban cambios
    socket.on('sellers-updated', (sellers) => {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const localSellers = sellers[local];

      // Actualizar los botones de vendedor
      for (let i = 1; i <= 4; i++) {
        const button = document.getElementById(`seller${i}`);
        if (button) {
          const sellerName = localSellers[`vendedor${i}`];
          button.textContent = sellerName || 'Vacío';
          button.disabled = !sellerName;
        }
      }
    });

    function getSellerName(seller) {
      if (!seller) return null;
      return typeof seller === 'object' ? seller.name : seller;
    }

    socket.on('sellers-updated', (sellers) => {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const localSellers = sellers[local];

      // Actualizar los botones de vendedor
      for (let i = 1; i <= 4; i++) {
        const button = document.getElementById(`seller${i}`);
        if (button) {
          const sellerName = getSellerName(localSellers[`vendedor${i}`]);
          button.textContent = sellerName || 'Vacío';
          button.disabled = !sellerName;
        }
      }
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
  <script src="/scripts/payment.js"></script>
  <script src="/scripts/Seller.js"></script>
  <script src="/scripts/historyPadidos.js"></script>
</body>

</html>