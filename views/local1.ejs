<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Foodtruck KM11</title>
  <link rel="stylesheet" href="/styles/base.css">
  <link rel="stylesheet" href="/styles/styles.css">
</head>

<body>

  <header class="header">
    <h1>Foodtruck - Empanadas KM11</h1>
    <div class="header-actions">
      <button onclick="window.location.href='/logout'">Cerrar Sesión</button>
      <button id="fullscreenBtn">[ ]</button>
    </div>
    <div class="header-actions">
      <!-- Botón para el dropdown -->
      <div class="dropdown">
        <button class="dropbtn">Acciones</button>
        <div class="dropdown-content">
          <!-- Botones dentro del dropdown -->
          <button onclick="showEmployeeLogModal()">Registrar Ingreso/Egreso</button>
          <!-- <button onclick="showEmployeeLogHistory()">Ver Historial de Asistencia</button> -->
          <button onclick="showHistory()" class="history-button">Historial de Pedidos</button>
          <button onclick="confirmCloseCashRegister()" class="btn-mostrarFormulario">Cierre de Caja</button>
          <!-- <button onclick="showCashRegisterHistoryModal()" class="btn-mostrarFormulario">Consultar Historial de
            Cierres</button> -->
        </div>
      </div>
    </div>
  </header>

  <!-- Sección de Productos -->
  <main class="pos-container">
    <section class="products-section">
      <h2>Productos Disponibles</h2>
      <!-- Selector de categorías -->
      <select id="categoryFilter" onchange="filterProductsByCategory()" class="select">
        <option value="Todas">Todas las Categorías</option>
        <!-- Las opciones de categorías se generarán dinámicamente con JavaScript -->
      </select>

      <ul id="product-list">
        <% products.forEach(product=> { %>
          <li id="product-<%= product.id %>" class="product-item">
            <div class="product-detail">
              <h3>
                <%= product.name %>
              </h3>
              <p>
                <%= product.description %>
              </p>
              <p>Categoría: <%= product.category %>
              </p>
              <p>Stock: <span id="stock-<%= product.id %>">
                  <%= product.stock %>
                </span></p>
              <p>Precio: $<%= product.price %>
              </p>
            </div>
            <% if (product.stock <=5) { %>
              <p class="low-stock">¡Stock bajo!</p>
              <button onclick="sendAlert('<%= product.name %>')" class="alert-button">Enviar alerta</button>
              <% } %>
                <div class="actions">
                  <button onclick="addToCart(<%= product.id %>, '<%= product.name %>', <%= product.price %>)"
                    class="add-button">Agregar</button>
                </div>

                <div id="delete-confirm-<%= product.id %>" class="delete-confirm" style="display: none;">
                  ¿Está seguro de eliminar este producto?
                  <button onclick="deleteProduct(<%= product.id %>)" class="delete-button">Sí, eliminar</button>
                  <button onclick="cancelDelete(<%= product.id %>)" class="alert-button">Cancelar</button>
                </div>
          </li>
          <% }) %>
      </ul>
    </section>

    <!-- Modal de Pago -->
    <section class="cart-section">
      <div id="paymentModal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Procesar Pago</h2>
          <div class="payment-summary">
            <p>Total a pagar: $<span id="modalTotal">0.00</span></p>
            <p>Restante: $<span id="remainingAmount" class="remaining-amount">0.00</span></p>
          </div>

          <!-- Campo para el nombre del pedido -->
          <div class="payment-input">
            <label>Nombre del Cliente:</label>
            <input type="text" id="orderName" placeholder="Ingrese el nombre">
          </div>

          <!-- Botones para seleccionar el vendedor -->
          <div class="payment-options">
            <button id="seller1" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller2" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller3" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller4" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
          </div>

          <div class="payment-options">
            <button onclick="selectPaymentMethod('efectivo')" class="cart-item">Efectivo</button>
            <button onclick="selectPaymentMethod('transferencia')" class="cart-item">Transferencia</button>
            <button onclick="selectPaymentMethod('tarjeta')" class="cart-item">Tarjeta</button>
            <button onclick="selectPaymentMethod('mixto')" class="cart-item">Mixto</button>
          </div>

          <div id="paymentInputs"></div>

          <button id="processPaymentBtn" class="cart-item" disabled>Procesar Pago</button>
          <button id="printOrderBtn" style="display: none;" class="cart-item">Imprimir Pedido</button>
          <!-- Botón para cerrar el modal -->
          <button id="closeModalBtn" class="cart-item" onclick="closeModal()">Cerrar</button>
        </div>
      </div>

      <!-- Modal de Historial -->
      <div id="historyModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeHistoryModal()">&times;</span>
          <h2>Historial de Pedidos</h2>
          <label>Fecha Unica:</label>
          <input type="date" id="filterDate" onchange="filterHistory()">
          <div class="date-range-filter">
            <label for="startDate">Desde:</label>
            <input type="date" id="startDate">

            <label for="endDate">Hasta:</label>
            <input type="date" id="endDate">

            <button onclick="filterHistoryByDateRange()">Filtrar</button>
          </div>
          <div id="historyContainer" class="history-container"></div>
          <button onclick="printHistory()" class="print-button">Imprimir Historial</button>
          <button onclick="downloadExcel()" class="print-button">Descargar Excel</button> <!-- Botón nuevo -->
        </div>
      </div>

      <!-- Sección del carrito -->
      <div class="cart" id="cart">
        <h2>Carrito de Compras</h2>
        <div id="cart-items"></div>
        <p>Total: $<span id="cart-total">0.00</span></p>
        <div class="cart-actions">
          <button onclick="showPaymentModal()" class="checkout-button" id="checkoutButton" disabled>
            Completar Compra
          </button>
        </div>
      </div>
    </section>
  </main>


  <!-- Modal para seleccionar empanadas -->
  <div id="docenaModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeDocenaModal()">&times;</span>
      <h2 id="docenaModalTitle"></h2>
      <div id="empanadasSelection"></div>
      <div class="modal-actions">
        <button onclick="confirmDocenaSelection()" style="padding: 10px;">Confirmar</button>
        <button onclick="closeDocenaModal()" style="padding: 10px;">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Agrega esto con los otros modales -->
  <div id="employeeLogModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeEmployeeLogModal()">&times;</span>
      <h2>Registro de Empleado</h2>
      <div>
        <label for="logEmployeeName">Nombre del Empleado:</label>
        <input type="text" id="logEmployeeName" placeholder="Ingrese el nombre">
      </div>
      <div class="log-actions">
        <button onclick="logEmployeeAction('ingreso')" class="log-button ingreso">Registrar Ingreso</button>
        <button onclick="logEmployeeAction('egreso')" class="log-button egreso">Registrar Egreso</button>
      </div>
    </div>
  </div>
<!-- scripts -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Determinar el local actual
    const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';
    let orderName = ''; // Variable para almacenar el nombre del pedido
    let selectedSeller = ''; // Variable para almacenar el vendedor seleccionado
    let totalPayments = 0; // Contador de pagos procesados
    let totalAmount = 0;   // Monto total generado


    /* socket.on('stock-update', function ({ local, items }) {
      // Verifica si el local es el correcto según la URL de la página
      const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      if (local === currentLocal) {
        // Recorre los items actualizados
        items.forEach(item => {
          const stockElement = document.getElementById(`stock-${item.id}`);
          const productElement = document.getElementById(`product-${item.id}`);

          if (stockElement && productElement) {
            // Determina el nivel de stock actual
            const currentStock = item.product && item.product.stock !== undefined
              ? item.product.stock
              : (item.newStock !== undefined ? item.newStock : null);

            // Actualiza el stock en la interfaz
            stockElement.textContent = currentStock !== null
              ? currentStock
              : "Stock actualizado";

            // Verifica si el stock es bajo (menor o igual a 5)
            const isLowStock = currentStock !== null && currentStock <= 5;

            // Busca si ya existe la advertencia o el botón
            const existingWarning = productElement.querySelector('.low-stock');
            const existingButton = productElement.querySelector('button[onclick*="sendAlert"]');

            if (isLowStock) {
              // Si el stock es bajo, agrega una advertencia si no existe
              if (!existingWarning) {
                const warning = document.createElement('p');
                warning.className = 'low-stock';
                warning.textContent = `¡Stock bajo! (${currentStock} unidades)`;
                warning.style.color = 'red';
                warning.style.fontWeight = 'bold';
                productElement.appendChild(warning);
              } else {
                // Actualiza el texto de advertencia existente
                existingWarning.textContent = `¡Stock bajo! (${currentStock} unidades)`;
              }

              // Si el botón de alerta no existe, lo agregamos
              if (!existingButton && currentLocal === 'local1') {
                const productName = productElement.querySelector('h3').textContent;
                const alertButton = document.createElement('button');
                alertButton.textContent = 'Enviar alerta a Local 2';
                alertButton.className = 'alert-button';
                alertButton.onclick = function () {
                  sendAlert(productName, currentStock);
                };
                productElement.appendChild(alertButton);
              }
            } else {
              // Si el stock no es bajo, eliminamos la advertencia y el botón si existen
              if (existingWarning) existingWarning.remove();
              if (existingButton) existingButton.remove();
            }
          }
        });
      }
    });

    // Función mejorada para enviar alerta
    function sendAlert(productName, stockLevel) {
      const alertData = {
        productName: productName,
        stockLevel: stockLevel,
        localFrom: window.location.pathname.includes('local1') ? 'Local 1' : 'Local 2',
        timestamp: new Date().toISOString() // Agregar una marca de tiempo
      };

      socket.emit('send-alert-to-local2', alertData);

      // Mostrar mensaje de envío en proceso
      showNotification('Enviando alerta por email...', 'info');
    }

    // Escuchar respuesta del servidor sobre el envío del email
    socket.on('alert-email-status', function (response) {
      if (response.success) {
        showNotification('Alerta enviada correctamente por email', 'success');
      } else {
        showNotification('Error al enviar la alerta por email', 'error');
      }
    });

    // Función auxiliar para mostrar notificaciones
    function showNotification(message, type = 'info', duration = 5000) {
      // Verificar si ya existe el contenedor de notificaciones
      let notifContainer = document.getElementById('notification-container');

      if (!notifContainer) {
        notifContainer = document.createElement('div');
        notifContainer.id = 'notification-container';
        notifContainer.style.position = 'fixed';
        notifContainer.style.top = '10px';
        notifContainer.style.right = '10px';
        notifContainer.style.zIndex = '9999';
        document.body.appendChild(notifContainer);
      }

      // Crear la notificación
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.innerHTML = `
    <div style="padding: 15px; margin-bottom: 10px; border-radius: 4px; background-color: ${type === 'success' ? '#d4edda' :
          type === 'error' ? '#f8d7da' :
            type === 'warning' ? '#fff3cd' : '#cce5ff'
        }; color: ${type === 'success' ? '#155724' :
          type === 'error' ? '#721c24' :
            type === 'warning' ? '#856404' : '#004085'
        }; border: 1px solid ${type === 'success' ? '#c3e6cb' :
          type === 'error' ? '#f5c6cb' :
            type === 'warning' ? '#ffeeba' : '#b8daff'
        };">
      ${message}
      <span style="float: right; cursor: pointer; font-weight: bold;" onclick="this.parentElement.parentElement.remove();">&times;</span>
    </div>
  `;

      notifContainer.appendChild(notification);

      // Eliminar después del tiempo especificado
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, duration);
    } */
  </script>
  <script src="/scripts/opencloseModal.js" defer></script>
  <script src="/scripts/dropdown.js" defer></script>
  <script src="/scripts/fullscreenBtn.js" defer></script>
  <script src="/scripts/closeboxConfirme.js" defer></script>
  <script src="/scripts/EmployeeLogModal.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
  <script src="/scripts/payment.js"></script>
  <script src="/scripts/Seller.js"></script>
  <script src="/scripts/historyPadidos.js"></script>
  <script src="/scripts/cart.js"></script>
  <script src="/scripts/filterProducts.js"></script>
  <script src="/scripts/alertStockLocal1.js"></script>
  <script src="/scripts/formDocena.js"></script>
</body>

</html>