<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Local 1 - Productos</title>
  <link rel="stylesheet" href="/styles.css">
</head>

<body>

  <header class="header">
    <h1>Local 1 - Empanadas KM11</h1>
    <div class="header-actions">
      <button onclick="window.location.href='/logout'">Cerrar Sesión</button>
      <button id="fullscreenBtn">[ ]</button>
    </div>
    <div class="header-actions">
      <!-- Botón para el dropdown -->
      <div class="dropdown">
        <button class="dropbtn">Acciones</button>
        <div class="dropdown-content">
          <!-- Botones dentro del dropdown -->
          <button onclick="showSellerModal()">Cambio de Turno</button>
          <button onclick="showEmployeeHistoryModal()">Historial de Empleados</button>
          <button onclick="showHistory()" class="history-button">Historial de Pedidos</button>
          <button onclick="closeCashRegister()" class="btn-mostrarFormulario">Cierre de Caja</button>
          <button onclick="showCashRegisterHistoryModal()" class="btn-mostrarFormulario">Consultar Historial de
            Cierres</button>
          <!-- <button onclick="cleanOldOrders()" class="btn-limpiar">Limpiar Pedidos Antiguos</button> -->
        </div>
      </div>
    </div>
  </header>

  <!-- Formulario para agregar/editar productos -->
  <!-- <button id="toggleFormButton" onclick="toggleForm()" class="btn-mostrarFormulario">Mostrar Formulario</button>
  <div class="product-form" id="productForm">
    <h3 id="formTitle">Agregar Nuevo Producto</h3>
    <input type="hidden" id="editProductId">
    <div>
      <label for="name">Nombre:</label>
      <input type="text" id="name" required>
    </div>
    <div>
      <label for="category">Categoría:</label>
      <input type="text" id="category" required>
    </div>
    <div>
      <label for="price">Precio:</label>
      <input type="number" id="price" min="0" step="0.01" required>
    </div>
    <div>
      <label for="stock">Stock:</label>
      <input type="number" id="stock" min="0" required>
    </div>
    <div>
      <label for="description">Descripción:</label>
      <input type="text" id="description" required>
    </div>
    <div class="actions">
      <button onclick="saveProduct()" class="btn-guardar">Guardar</button>
      <button onclick="cancelEdit()" id="cancelButton" style="display: none;" class="btn-cancelar">Cancelar</button>
    </div>
    <div id="formError" class="error-message"></div>
  </div> -->

  <!-- Sección de Productos -->
  <main class="pos-container">
    <section class="products-section">
      <h2>Productos Disponibles</h2>
      <!-- Selector de categorías -->
      <select id="categoryFilter" onchange="filterProductsByCategory()" class="select">
        <option value="Todas">Todas las Categorías</option>
        <!-- Las opciones de categorías se generarán dinámicamente con JavaScript -->
      </select>

      <ul id="product-list">
        <% products.forEach(product=> { %>
          <li id="product-<%= product.id %>" class="product-item">
            <div class="product-detail">
              <h3>
                <%= product.name %>
              </h3>
              <p>
                <%= product.description %>
              </p>
              <p>Categoría: <%= product.category %>
              </p>
              <p>Stock: <span id="stock-<%= product.id %>">
                  <%= product.stock %>
                </span></p>
              <p>Precio: $<%= product.price %>
              </p>
            </div>
            <% if (product.stock <=5) { %>
              <p class="low-stock">¡Stock bajo!</p>
              <button onclick="sendAlert('<%= product.name %>')" class="alert-button">Enviar alerta</button>
              <% } %>
                <div class="actions">
                  <!-- <button onclick="editProduct(<%= JSON.stringify(product) %>)" class="edit-button">Editar</button>
                  <button onclick="confirmDelete(<%= product.id %>)" class="delete-button">Eliminar</button> -->
                  <button onclick="addToCart(<%= product.id %>, '<%= product.name %>', <%= product.price %>)"
                    class="add-button">Agregar</button>
                </div>

                <div id="delete-confirm-<%= product.id %>" class="delete-confirm" style="display: none;">
                  ¿Está seguro de eliminar este producto?
                  <button onclick="deleteProduct(<%= product.id %>)" class="delete-button">Sí, eliminar</button>
                  <button onclick="cancelDelete(<%= product.id %>)" class="alert-button">Cancelar</button>
                </div>
          </li>
          <% }) %>
      </ul>
    </section>

    <!-- Modal de Pago -->
    <section class="cart-section">
      <div id="paymentModal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Procesar Pago</h2>
          <div class="payment-summary">
            <p>Total a pagar: $<span id="modalTotal">0.00</span></p>
            <p>Restante: $<span id="remainingAmount" class="remaining-amount">0.00</span></p>
          </div>

          <!-- Campo para el nombre del pedido -->
          <div class="payment-input">
            <label>Nombre del Cliente:</label>
            <input type="text" id="orderName" placeholder="Ingrese el nombre">
          </div>

          <!-- Botones para seleccionar el vendedor -->
          <div class="payment-options">
            <button id="seller1Button" onclick="selectSeller('Vendedor 1')" class="cart-item">Vendedor 1</button>
            <button id="seller2Button" onclick="selectSeller('Vendedor 2')" class="cart-item">Vendedor 2</button>
          </div>

          <div class="payment-options">
            <button onclick="selectPaymentMethod('efectivo')" class="cart-item">Efectivo</button>
            <button onclick="selectPaymentMethod('transferencia')" class="cart-item">Transferencia</button>
            <button onclick="selectPaymentMethod('mixto')" class="cart-item">Mixto</button>
          </div>

          <div id="paymentInputs"></div>

          <button id="processPaymentBtn" class="cart-item" disabled>Procesar Pago</button>
          <button id="printOrderBtn" style="display: none;" class="cart-item">Imprimir Pedido</button>
        </div>
      </div>

      <!-- Modal de Historial -->
      <div id="historyModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeHistoryModal()">&times;</span>
          <h2>Historial de Pedidos</h2>
          <input type="date" id="filterDate" onchange="filterHistory()">
          <div id="historyContainer" class="history-container"></div>
          <button onclick="printHistory()" class="print-button">Imprimir Historial</button>
        </div>
      </div>

      <!-- Sección del carrito -->
      <div class="cart" id="cart">
        <h2>Carrito de Compras</h2>
        <div id="cart-items"></div>
        <p>Total: $<span id="cart-total">0.00</span></p>
        <div class="cart-actions">
          <button onclick="showPaymentModal()" class="checkout-button" id="checkoutButton" disabled>
            Completar Compra
          </button>
        </div>
      </div>
    </section>
  </main>

  <!-- Modal para cambiar el nombre del vendedor -->
  <div id="sellerModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeSellerModal()">&times;</span>
      <h2>Cambiar Nombre del Vendedor</h2>
      <div>
        <label for="sellerSelect">Seleccionar Vendedor:</label>
        <select id="sellerSelect">
          <option value="vendedor1">Vendedor 1</option>
          <option value="vendedor2">Vendedor 2</option>
        </select>
      </div>
      <div>
        <label for="sellerName">Nombre:</label>
        <input type="text" id="sellerName" placeholder="Ingrese el nombre del vendedor">
      </div>
      <button onclick="updateSeller()">Guardar Cambios</button>
      <div id="sellerInfo"></div>
    </div>
  </div>

  <!-- Modal para el historial de empleados -->
  <div id="employeeHistoryModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeEmployeeHistoryModal()">&times;</span>
      <h2>Historial de Cambios de Empleados</h2>
      <div id="employeeHistoryContainer" class="history-container"></div>
      <button onclick="printEmployeeHistory()" class="print-button">Imprimir Historial</button>
    </div>
  </div>

  <!-- Modal para el historial de cierres de caja -->
  <div id="cashRegisterHistoryModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeCashRegisterHistoryModal()">&times;</span>
      <h2>Historial de Cierres de Caja</h2>
      <div id="cash-register-history" class="history-container"></div>
      <button onclick="printCashRegisterHistory()" class="print-button">Imprimir Historial</button>
    </div>
  </div>


  <!-- Modal para seleccionar empanadas -->
  <div id="docenaModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeDocenaModal()">&times;</span>
      <h2 id="docenaModalTitle"></h2>
      <div id="empanadasSelection"></div>
      <div class="modal-actions">
        <button onclick="confirmDocenaSelection()" style="padding: 10px;">Confirmar</button>
        <button onclick="closeDocenaModal()" style="padding: 10px;">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Formulario para agregar nuevas docenas -->
  <!-- <div class="docena-form" id="docenaForm">
    <h3>Agregar Nueva Docena</h3>
    <div>
      <label for="docenaName">Nombre de la Docena:</label>
      <input type="text" id="docenaName" required>
    </div>
    <div>
      <label for="docenaPrice">Precio:</label>
      <input type="number" id="docenaPrice" min="0" step="0.01" required>
    </div>
    <div>
      <label for="docenaStock">Stock:</label>
      <input type="number" id="docenaStock" min="0" required>
    </div>
    <div>
      <label for="docenaDescription">Descripción:</label>
      <input type="text" id="docenaDescription" required>
    </div>
    <div>
      <h4>Seleccionar Empanadas:</h4>
      <div id="empanadasSelection"> -->
  <!-- Aquí se generarán dinámicamente las opciones de empanadas -->
  <!-- </div>
    </div>
    <div class="actions">
      <button onclick="saveDocena()" class="btn-guardar">Guardar Docena</button>
      <button onclick="cancelDocena()" class="btn-cancelar">Cancelar</button>
    </div>
    <div id="docenaFormError" class="error-message"></div>
  </div> -->
  <!-- 
  <button onclick="toggleDocenaForm()" class="btn-mostrarFormulario">Agregar Docena</button> -->
  <script>
    // Esta función abre y cierra el dropdown al hacer clic en el botón
    document.querySelector('.dropbtn').addEventListener('click', function () {
      const dropdownContent = document.querySelector('.dropdown-content');
      dropdownContent.style.display = (dropdownContent.style.display === 'block') ? 'none' : 'block';
    });

    // Cerrar el dropdown si el usuario hace clic fuera de él
    window.onclick = function (event) {
      if (!event.target.matches('.dropbtn')) {
        const dropdowns = document.querySelectorAll('.dropdown-content');
        dropdowns.forEach(dropdown => {
          if (dropdown.style.display === 'block') {
            dropdown.style.display = 'none';
          }
        });
      }
    };
  </script>
  <script>
    const fullscreenBtn = document.getElementById('fullscreenBtn');

    fullscreenBtn.addEventListener('click', () => {
      if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
      } else if (document.documentElement.mozRequestFullScreen) { // Firefox
        document.documentElement.mozRequestFullScreen();
      } else if (document.documentElement.webkitRequestFullscreen) { // Chrome, Safari, Opera
        document.documentElement.webkitRequestFullscreen();
      } else if (document.documentElement.msRequestFullscreen) { // IE/Edge
        document.documentElement.msRequestFullscreen();
      }
    });
  </script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    function cleanOldOrders() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      fetch('/clean-old-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Local': local // Enviar el local actual
        }
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Datos antiguos eliminados correctamente');
            location.reload(); // Recargar la página para actualizar la lista de datos
          } else {
            alert('Error al eliminar datos antiguos');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al eliminar datos antiguos');
        });
    }


    function toggleDocenaForm() {
      const form = document.getElementById('docenaForm');
      if (form.style.display === 'none' || !form.style.display) {
        form.style.display = 'block';
        loadEmpanadasForDocena(); // Cargar las empanadas disponibles
      } else {
        form.style.display = 'none';
      }
    }

    function loadEmpanadasForDocena() {
      const empanadasSelection = document.getElementById('empanadasSelection');
      empanadasSelection.innerHTML = ''; // Limpiar el contenedor

      // Obtener las empanadas disponibles (puedes obtenerlas desde tu inventario)
      const empanadas = [
        "Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza",
        "Carne Picante", "Choclo", "Salchicha Alemana", "Capresse",
        "Roquefort", "Vacio Provolone", "Chesse Burger", "Cordero",
        "Trucha", "Ciervo"
      ];

      // Generar las opciones de empanadas
      empanadas.forEach((empanada, index) => {
        const empanadaDiv = document.createElement('div');
        empanadaDiv.innerHTML = `
      <label>${empanada}:</label>
      <input type="number" id="empanada-${index}" min="0" value="0">
    `;
        empanadasSelection.appendChild(empanadaDiv);
      });
    }

    function saveDocena() {
      const docenaName = document.getElementById('docenaName').value;
      const docenaPrice = parseFloat(document.getElementById('docenaPrice').value);
      const docenaStock = parseInt(document.getElementById('docenaStock').value);
      const docenaDescription = document.getElementById('docenaDescription').value;

      // Obtener las cantidades de cada empanada
      const empanadasSelection = document.getElementById('empanadasSelection');
      const empanadasInputs = empanadasSelection.querySelectorAll('input[type="number"]');
      const empanadasDetails = [];

      empanadasInputs.forEach((input, index) => {
        const quantity = parseInt(input.value);
        if (quantity > 0) {
          empanadasDetails.push({
            name: input.previousElementSibling.textContent.replace(':', '').trim(),
            quantity: quantity
          });
        }
      });

      // Validar que se hayan seleccionado empanadas
      if (empanadasDetails.length === 0) {
        document.getElementById('docenaFormError').textContent = 'Debes seleccionar al menos una empanada.';
        document.getElementById('docenaFormError').style.display = 'block';
        return;
      }

      // Crear el objeto de la nueva docena
      const newDocena = {
        name: docenaName,
        category: "Docena",
        price: docenaPrice,
        stock: docenaStock,
        description: docenaDescription,
        details: empanadasDetails
      };

      // Enviar la nueva docena al servidor (usando Socket.IO o fetch)
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('add-docena', { local, docena: newDocena });

      // Limpiar el formulario
      cancelDocena();
      alert('Docena agregada correctamente.');
    }

    function cancelDocena() {
      document.getElementById('docenaForm').reset();
      document.getElementById('docenaFormError').style.display = 'none';
    }

    const docenas = {
      "Docena Tradicionales": ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana"],
      "Docena Especiales": ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana", "Capresse", "Roquefort"],
      "Docena Vacio": ["Vacio Provolone", "Chesse Burger"],
      "Docena Imperdibles": ["Cordero", "Trucha", "Ciervo"],
      "Docena Combinada 1": {
        tipo: "combinada",
        combinaciones: [
          { nombre: "Tradicionales", cantidad: 3, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana"] },
          { nombre: "Especiales", cantidad: 3, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana", "Capresse", "Roquefort"] },
          { nombre: "Vacio", cantidad: 3, opciones: ["Vacio Provolone", "Chesse Burger"] },
          { nombre: "Imperdibles", cantidad: 3, opciones: ["Cordero", "Trucha", "Ciervo"] }
        ]
      },
      "Docena Combinada 2": {
        tipo: "combinada",
        combinaciones: [
          { nombre: "Tradicionales", cantidad: 4, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana"] },
          { nombre: "Especiales", cantidad: 4, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana", "Capresse", "Roquefort"] },
          { nombre: "Imperdibles", cantidad: 4, opciones: ["Cordero", "Trucha", "Ciervo"] }
        ]
      },
      // "nueva docena": { // Nueva docena
      //   tipo: "combinada", // Puede ser "simple" o "combinada"
      //   combinaciones: [
      //     { nombre: "Tradicionales", cantidad: 4, opciones: ["Carne", "Pollo", "Verdura"] },
      //     { nombre: "Vacio", cantidad: 4, opciones: ["Vacio Provolone", "Chesse Burger"] },
      //     { nombre: "Imperdibles", cantidad: 4, opciones: ["Cordero", "Trucha", "Ciervo"] }
      //   ]
      // }
    };

    // Determinar el local actual
    const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';
    let orderName = ''; // Variable para almacenar el nombre del pedido
    let selectedSeller = ''; // Variable para almacenar el vendedor seleccionado
    let totalPayments = 0; // Contador de pagos procesados
    let totalAmount = 0;   // Monto total generado
    function printEmployeeHistory() {
      const historyContent = document.getElementById('employeeHistoryContainer').innerHTML;
      const printWindow = window.open('', '_blank');
      printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial; }
        .history-entry { margin-bottom: 20px; }
      </style>
    </head>
    <body>
      <h2>Historial de Cambios de Empleados</h2>
      ${historyContent}
    </body>
    </html>
  `);
      printWindow.document.close();
      printWindow.print();
    }

    // Función para mostrar el modal de historial de empleados
    function showEmployeeHistoryModal() {
      const modal = document.getElementById('employeeHistoryModal');
      modal.style.display = 'block'; // Mostrar el modal
      loadEmployeeHistory(); // Cargar el historial
    }

    // Función para cerrar el modal de historial de empleados
    function closeEmployeeHistoryModal() {
      document.getElementById('employeeHistoryModal').style.display = 'none';
    }

    // Función para cargar el historial de empleados
    function loadEmployeeHistory() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      fetch(`/get-sellers-history?local=${local}`)
        .then(response => response.json())
        .then(data => {
          const container = document.getElementById('employeeHistoryContainer');
          container.innerHTML = '';

          data.forEach(entry => {
            const entryElement = document.createElement('div');
            entryElement.className = 'history-entry';
            entryElement.innerHTML = `
          <p><strong>Local:</strong> ${entry.local}</p>
          <p><strong>Vendedor:</strong> ${entry.seller}</p>
          <p><strong>Nombre anterior:</strong> ${entry.oldName || 'N/A'}</p>
          <p><strong>Nombre nuevo:</strong> ${entry.newName}</p>
          <p><strong>Fecha de cambio:</strong> ${new Date(entry.updatedAt).toLocaleString()}</p>
          <hr>
        `;
            container.appendChild(entryElement);
          });
        })
        .catch(error => {
          console.error('Error al cargar el historial de empleados:', error);
        });
    }
    // Función para mostrar el modal de cambio de vendedor
    function showSellerModal() {
      const modal = document.getElementById('sellerModal');
      modal.style.display = 'block';
      loadSellerInfo();
    }

    // Función para cerrar el modal de cambio de vendedor
    function closeSellerModal() {
      document.getElementById('sellerModal').style.display = 'none';
    }

    // Función para cargar la información de los vendedores
    function loadSellerInfo() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      fetch('/get-sellers')
        .then(response => response.json())
        .then(data => {
          const sellerInfo = document.getElementById('sellerInfo');
          sellerInfo.innerHTML = `
        <p>Vendedor 1: ${data[local].vendedor1 ? data[local].vendedor1.name : 'No definido'} (Última actualización: ${data[local].vendedor1 ? new Date(data[local].vendedor1.updatedAt).toLocaleString() : 'N/A'})</p>
        <p>Vendedor 2: ${data[local].vendedor2 ? data[local].vendedor2.name : 'No definido'} (Última actualización: ${data[local].vendedor2 ? new Date(data[local].vendedor2.updatedAt).toLocaleString() : 'N/A'})</p>
      `;

          // Actualizar los botones del modal de pago
          if (data[local].vendedor1) {
            document.getElementById('seller1Button').textContent = data[local].vendedor1.name;
          }
          if (data[local].vendedor2) {
            document.getElementById('seller2Button').textContent = data[local].vendedor2.name;
          }
        });
    }

    // Función para actualizar el nombre del vendedor
    function updateSeller() {
      const seller = document.getElementById('sellerSelect').value;
      const name = document.getElementById('sellerName').value;

      if (!name) {
        alert('Por favor, ingrese un nombre válido.');
        return;
      }

      fetch('/update-seller', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Local': currentLocal // Enviar el local actual
        },
        body: JSON.stringify({ seller, name })
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al actualizar el vendedor');
          closeSellerModal();
          loadSellerInfo();
          // Actualizar el nombre del vendedor en los botones del modal de pago
          if (seller === 'vendedor1') {
            document.getElementById('seller1Button').textContent = name;
          } else if (seller === 'vendedor2') {
            document.getElementById('seller2Button').textContent = name;
          }
        })
        .catch(error => {
          alert(error.message);
        });
    }

    // Escuchar el evento de actualización de vendedores
    socket.on('seller-updated', function (sellers) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const sellerInfo = document.getElementById('sellerInfo');
      sellerInfo.innerHTML = `
    <p>Vendedor 1: ${sellers[local].vendedor1 ? sellers[local].vendedor1.name : 'No definido'} (Última actualización: ${sellers[local].vendedor1 ? new Date(sellers[local].vendedor1.updatedAt).toLocaleString() : 'N/A'})</p>
    <p>Vendedor 2: ${sellers[local].vendedor2 ? sellers[local].vendedor2.name : 'No definido'} (Última actualización: ${sellers[local].vendedor2 ? new Date(sellers[local].vendedor2.updatedAt).toLocaleString() : 'N/A'})</p>
  `;

      // Actualizar los botones del modal de pago
      if (sellers[local].vendedor1) {
        document.getElementById('seller1Button').textContent = sellers[local].vendedor1.name;
      }
      if (sellers[local].vendedor2) {
        document.getElementById('seller2Button').textContent = sellers[local].vendedor2.name;
      }
    });
    // Función para seleccionar el vendedor
    function selectSeller(seller) {
      selectedSeller = seller;
      alert(`Vendedor seleccionado: ${seller}`);
    }

    // Función para actualizar el nombre del pedido
    function updateOrderName() {
      orderName = document.getElementById('orderName').value;
    }

    // Variable local para almacenar el carrito
    let cart = [];

    // Escuchar el evento cart-updated
    socket.on('cart-updated', function ({ local, cart: updatedCart }) {
      // Solo actualizar si el carrito pertenece al local actual
      if (local === (window.location.pathname.includes('local1') ? 'local1' : 'local2')) {
        cart = updatedCart; // Actualizar el carrito local
        updateCartUI(); // Actualizar la interfaz
      }
    });

    let currentDocena = null; // Variable para almacenar la docena seleccionada

    function addToCart(productId, productName, productPrice) {
      const docenaType = Object.keys(docenas).find(docena => productName.includes(docena));

      if (docenaType) {
        currentDocena = {
          id: productId,
          name: productName,
          price: productPrice,
          type: docenaType,
          config: docenas[docenaType]
        };

        openDocenaModal(currentDocena);
      } else {
        // Si no es una docena, agregar el producto normalmente
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: null
          }
        });
      }
    }

    function openDocenaModal(docena) {
      const modal = document.getElementById('docenaModal');
      const title = document.getElementById('docenaModalTitle');
      const selection = document.getElementById('empanadasSelection');

      title.textContent = `Seleccionar empanadas para ${docena.name}`;
      selection.innerHTML = '';

      if (docena.config.tipo === 'combinada') {
        // Si es una docena combinada, mostrar los grupos
        docena.config.combinaciones.forEach((grupo, grupoIndex) => {
          const grupoDiv = document.createElement('div');
          grupoDiv.className = 'grupo-empanadas';
          grupoDiv.innerHTML = `<h4>${grupo.nombre} (${grupo.cantidad} unidades)</h4>`;

          grupo.opciones.forEach((empanada, empanadaIndex) => {
            const empanadaDiv = document.createElement('div');
            empanadaDiv.className = 'empanada-item';
            empanadaDiv.innerHTML = `
          <span>${empanada}</span>
          <div>
            <button onclick="decrementEmpanada(${grupoIndex}, ${empanadaIndex})">-</button>
            <span id="empanada-${grupoIndex}-${empanadaIndex}-quantity">0</span>
            <button onclick="incrementEmpanada(${grupoIndex}, ${empanadaIndex}, ${grupo.cantidad})">+</button>
          </div>
        `;
            grupoDiv.appendChild(empanadaDiv);
          });

          selection.appendChild(grupoDiv);
        });
      } else {
        // Si es una docena normal, mostrar todas las empanadas
        docena.config.forEach((empanada, index) => {
          const empanadaDiv = document.createElement('div');
          empanadaDiv.className = 'empanada-item';
          empanadaDiv.innerHTML = `
        <span>${empanada}</span>
        <div>
          <button onclick="decrementEmpanada(0, ${index})">-</button>
          <span id="empanada-0-${index}-quantity">0</span>
          <button onclick="incrementEmpanada(0, ${index}, 12)">+</button>
        </div>
      `;
          selection.appendChild(empanadaDiv);
        });
      }

      modal.style.display = 'block';
    }

    function closeDocenaModal() {
      document.getElementById('docenaModal').style.display = 'none';
      currentDocena = null;
    }

    function incrementEmpanada(grupoIndex, empanadaIndex, maxQuantity) {
      const quantityElement = document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`);
      let quantity = parseInt(quantityElement.textContent);

      // Verificar que no se exceda la cantidad máxima permitida
      const totalSelected = getTotalSelectedForGroup(grupoIndex);
      if (totalSelected < maxQuantity) {
        quantity += 1;
        quantityElement.textContent = quantity;
      } else {
        alert(`No puedes seleccionar más de ${maxQuantity} unidades en este grupo.`);
      }
    }

    function decrementEmpanada(grupoIndex, empanadaIndex) {
      const quantityElement = document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`);
      let quantity = parseInt(quantityElement.textContent);
      if (quantity > 0) {
        quantity -= 1;
        quantityElement.textContent = quantity;
      }
    }

    function getTotalSelectedForGroup(grupoIndex) {
      let total = 0;
      const grupoDiv = document.querySelectorAll(`#empanadasSelection .grupo-empanadas`)[grupoIndex];
      if (grupoDiv) {
        const quantityElements = grupoDiv.querySelectorAll('span[id$="-quantity"]');
        quantityElements.forEach(element => {
          total += parseInt(element.textContent);
        });
      }
      return total;
    }

    function confirmDocenaSelection() {
      const grupos = [];
      let isValid = true;

      if (currentDocena.config.tipo === 'combinada') {
        // Para docenas combinadas, validar cada grupo
        currentDocena.config.combinaciones.forEach((grupo, grupoIndex) => {
          const empanadas = [];
          let totalSelected = 0;

          grupo.opciones.forEach((empanada, empanadaIndex) => {
            const quantity = parseInt(document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`).textContent);
            if (quantity > 0) {
              empanadas.push({ name: empanada, quantity });
              totalSelected += quantity;
            }
          });

          if (totalSelected !== grupo.cantidad) {
            alert(`Debes seleccionar exactamente ${grupo.cantidad} unidades en el grupo "${grupo.nombre}".`);
            isValid = false;
          }

          grupos.push({
            grupo: grupo.nombre,
            empanadas: empanadas
          });
        });
      } else {
        // Para docenas normales, validar el total de empanadas
        const empanadas = [];
        let totalSelected = 0;

        currentDocena.config.forEach((empanada, index) => {
          const quantity = parseInt(document.getElementById(`empanada-0-${index}-quantity`).textContent);
          if (quantity > 0) {
            empanadas.push({ name: empanada, quantity });
            totalSelected += quantity;
          }
        });

        if (totalSelected !== 12) {
          alert('Debes seleccionar exactamente 12 empanadas.');
          isValid = false;
        }

        grupos.push({
          grupo: 'Docena',
          empanadas: empanadas
        });
      }

      if (isValid) {
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: currentDocena.id,
            name: currentDocena.name,
            price: currentDocena.price,
            quantity: 1,
            details: grupos.flatMap(g => g.empanadas),
            gruposDetalle: grupos // Mantener los grupos para mejor visualización
          }
        });
        closeDocenaModal();
      }
    }
    function handleRegularDocena(productId, productName, productPrice, empanadasDisponibles) {
      const empanadas = empanadasDisponibles.map(name => ({ name, quantity: 0 }));
      let totalSelected = 0;

      // Pedir al usuario que ingrese la cantidad de cada empanada
      while (totalSelected < 12) {
        let message = `Seleccione cuántas unidades de cada empanada desea para la ${productName} (total 12):\n`;
        empanadas.forEach((empanada, index) => {
          message += `${index + 1}. ${empanada.name}: ${empanada.quantity} unidades\n`;
        });
        message += `Total seleccionado: ${totalSelected}/12`;

        const input = prompt(message + "\n\nIngrese el número de la empanada y la cantidad (ej: 1 3):");

        if (input === null) {
          // Si el usuario cancela, salir del bucle
          break;
        }

        const [empanadaIndex, quantity] = input.split(" ").map(Number);
        if (
          empanadaIndex >= 1 &&
          empanadaIndex <= empanadas.length &&
          quantity >= 0 &&
          quantity <= 12 - totalSelected
        ) {
          empanadas[empanadaIndex - 1].quantity += quantity;
          totalSelected += quantity;
        } else {
          alert("Entrada inválida. Asegúrese de ingresar un número válido y una cantidad que no exceda las 12 unidades.");
        }
      }

      if (totalSelected === 12) {
        // Filtrar solo las empanadas con cantidad > 0
        const selectedEmpanadas = empanadas.filter(empanada => empanada.quantity > 0);

        // Agregar la docena al carrito con el detalle de las empanadas
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: selectedEmpanadas // Guardar el detalle de las empanadas
          }
        });
        alert(`${productName} agregada al carrito.`);
      } else {
        alert('No se completó la selección de la docena.');
      }
    }

    function handleCombinedDocena(productId, productName, productPrice, docenaConfig) {
      const combinaciones = docenaConfig.combinaciones;
      const detallesSeleccionados = [];
      let seleccionCompleta = true;

      // Recorrer cada subcategoría de la docena combinada
      for (const combinacion of combinaciones) {
        const empanadasDeCombinacion = obtenerEmpanadaDeCombinacion(
          combinacion.nombre,
          combinacion.opciones,
          combinacion.cantidad
        );

        // Si el usuario canceló la selección
        if (!empanadasDeCombinacion) {
          seleccionCompleta = false;
          break;
        }

        // Agregar el grupo a los detalles seleccionados
        detallesSeleccionados.push({
          grupo: combinacion.nombre,
          empanadas: empanadasDeCombinacion
        });
      }

      if (seleccionCompleta) {
        // Aplanar la selección para crear una lista única de empanadas
        const empanadasSeleccionadas = detallesSeleccionados.flatMap(grupo =>
          grupo.empanadas.map(emp => ({
            name: `${emp.name} (${grupo.grupo})`,
            quantity: emp.quantity
          }))
        );

        // Agregar la docena al carrito
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: empanadasSeleccionadas,
            gruposDetalle: detallesSeleccionados // Mantener los grupos para mejor visualización
          }
        });
        alert(`${productName} agregada al carrito.`);
      } else {
        alert('No se completó la selección de la docena combinada.');
      }
    }

    function obtenerEmpanadaDeCombinacion(nombreGrupo, opcionesDisponibles, cantidadRequerida) {
      const empanadas = opcionesDisponibles.map(name => ({ name, quantity: 0 }));
      let totalSelected = 0;

      // Pedir al usuario que ingrese la cantidad de cada empanada
      while (totalSelected < cantidadRequerida) {
        let message = `Seleccione ${cantidadRequerida} empanadas de "${nombreGrupo}" (seleccionadas: ${totalSelected}/${cantidadRequerida}):\n`;
        empanadas.forEach((empanada, index) => {
          message += `${index + 1}. ${empanada.name}: ${empanada.quantity} unidades\n`;
        });

        const input = prompt(message + "\n\nIngrese el número de la empanada y la cantidad (ej: 1 2):");

        if (input === null) {
          // Si el usuario cancela, devolver null
          return null;
        }

        const [empanadaIndex, quantity] = input.split(" ").map(Number);
        if (
          empanadaIndex >= 1 &&
          empanadaIndex <= empanadas.length &&
          quantity >= 0 &&
          quantity <= cantidadRequerida - totalSelected
        ) {
          empanadas[empanadaIndex - 1].quantity += quantity;
          totalSelected += quantity;
        } else {
          alert(`Entrada inválida. Asegúrese de ingresar un número válido y una cantidad que no exceda las ${cantidadRequerida - totalSelected} unidades restantes.`);
        }
      }

      // Filtrar solo las empanadas con cantidad > 0
      return empanadas.filter(empanada => empanada.quantity > 0);
    }

    // Función para incrementar la cantidad de un producto
    function incrementProduct(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('increment-product', { local, productId });
    }

    // Función para decrementar la cantidad de un producto
    function decrementProduct(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('decrement-product', { local, productId });
    }

    // Función para eliminar un producto del carrito
    function removeFromCart(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('remove-from-cart', { local, productId });
    }

    // Función para actualizar la interfaz del carrito
    function updateCartUI() {
      const cartItemsElement = document.getElementById('cart-items');
      const cartTotalElement = document.getElementById('cart-total');
      const checkoutButton = document.getElementById('checkoutButton');

      cartItemsElement.innerHTML = ''; // Limpiar el carrito antes de actualizar
      let total = 0;

      // Recorrer los productos en el carrito
      cart.forEach((item) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'cart-item';
        itemElement.innerHTML = `
      <p>${item.name} - $${item.price} x ${item.quantity}</p>
      <button onclick="decrementProduct(${item.id})">-</button>
      <span>${item.quantity}</span>
      <button onclick="incrementProduct(${item.id})">+</button>
      <button onclick="removeFromCart(${item.id})">Eliminar</button>
    `;
        cartItemsElement.appendChild(itemElement);
        total += item.price * item.quantity; // Calcular el total
      });

      cartTotalElement.textContent = total.toFixed(2); // Actualizar el total
      checkoutButton.disabled = cart.length === 0; // Habilitar/deshabilitar el botón de compra
    }

    // Script para manejar el carrito y el pago
    document.addEventListener('DOMContentLoaded', function () {
      // Botón de checkout
      const checkoutButton = document.getElementById('checkoutButton');
      const modal = document.getElementById('paymentModal');
      const closeBtn = modal.querySelector('.close');
      const processPaymentBtn = document.getElementById('processPaymentBtn');

      // Event Listeners
      checkoutButton.addEventListener('click', showPaymentModal);
      closeBtn.addEventListener('click', closePaymentModal);
      processPaymentBtn.addEventListener('click', processPayment);
    });

    // CRUD Operations
    function saveProduct() {
      const productId = document.getElementById('editProductId').value;
      const product = {
        name: document.getElementById('name').value,
        category: document.getElementById('category').value,
        price: parseFloat(document.getElementById('price').value),
        stock: parseInt(document.getElementById('stock').value),
        description: document.getElementById('description').value
      };

      const url = productId ?
        `/update-product/local1/${productId}` :
        `/add-product/local1`;

      fetch(url, {
        method: productId ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(product)
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al guardar el producto');
          return response.json();
        })
        .then(() => {
          resetForm();
          // La actualización de la UI se maneja a través de Socket.IO
        })
        .catch(error => {
          document.getElementById('formError').textContent = error.message;
          document.getElementById('formError').style.display = 'block';
        });
    }

    function editProduct(product) {
      document.getElementById('formTitle').textContent = 'Editar Producto';
      document.getElementById('editProductId').value = product.id;
      document.getElementById('name').value = product.name;
      document.getElementById('category').value = product.category;
      document.getElementById('price').value = product.price;
      document.getElementById('stock').value = product.stock;
      document.getElementById('description').value = product.description;
      document.getElementById('cancelButton').style.display = 'inline';

      document.getElementById('productForm').scrollIntoView({ behavior: 'smooth' });
    }

    function confirmDelete(productId) {
      document.getElementById(`delete-confirm-${productId}`).style.display = 'block';
    }

    function deleteProduct(productId) {
      fetch(`/delete-product/local1/${productId}`, {
        method: 'DELETE'
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al eliminar el producto');
          // La actualización de la UI se maneja a través de Socket.IO
        })
        .catch(error => {
          alert(error.message);
        });
    }

    function cancelDelete(productId) {
      document.getElementById(`delete-confirm-${productId}`).style.display = 'none';
    }

    function cancelEdit() {
      resetForm();
    }

    function resetForm() {
      document.getElementById('formTitle').textContent = 'Agregar Nuevo Producto';
      document.getElementById('editProductId').value = '';
      document.getElementById('productForm').reset();
      document.getElementById('cancelButton').style.display = 'none';
      document.getElementById('formError').style.display = 'none';
    }

    // Socket event listeners
    socket.on('product-added', function (data) {
      if (data.location === 'local1') {
        location.reload();
      }
    });

    socket.on('product-updated', function (data) {
      if (data.location === 'local1') {
        location.reload();
      }
    });

    socket.on('product-deleted', function (data) {
      if (data.location === 'local1') {
        const element = document.getElementById(`product-${data.productId}`);
        if (element) element.remove();
      }
    });

    socket.on('stock-update', function ({ local, items }) {
      // Verifica si el local es el correcto según la URL de la página
      const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      if (local === currentLocal) {
        // Recorre los items actualizados
        items.forEach(item => {
          const stockElement = document.getElementById(`stock-${item.id}`);
          const productElement = document.getElementById(`product-${item.id}`);

          if (stockElement && productElement) {
            // Determina el nivel de stock actual
            const currentStock = item.product && item.product.stock !== undefined
              ? item.product.stock
              : (item.newStock !== undefined ? item.newStock : null);

            // Actualiza el stock en la interfaz
            stockElement.textContent = currentStock !== null
              ? currentStock
              : "Stock actualizado";

            // Verifica si el stock es bajo (menor o igual a 5)
            const isLowStock = currentStock !== null && currentStock <= 5;

            // Busca si ya existe la advertencia o el botón
            const existingWarning = productElement.querySelector('.low-stock');
            const existingButton = productElement.querySelector('button[onclick*="sendAlert"]');

            if (isLowStock) {
              // Si el stock es bajo, agrega una advertencia si no existe
              if (!existingWarning) {
                const warning = document.createElement('p');
                warning.className = 'low-stock';
                warning.textContent = `¡Stock bajo! (${currentStock} unidades)`;
                warning.style.color = 'red';
                warning.style.fontWeight = 'bold';
                productElement.appendChild(warning);
              } else {
                // Actualiza el texto de advertencia existente
                existingWarning.textContent = `¡Stock bajo! (${currentStock} unidades)`;
              }

              // Si el botón de alerta no existe, lo agregamos
              if (!existingButton && currentLocal === 'local1') {
                const productName = productElement.querySelector('h3').textContent;
                const alertButton = document.createElement('button');
                alertButton.textContent = 'Enviar alerta a Local 2';
                alertButton.className = 'alert-button';
                alertButton.onclick = function () {
                  sendAlert(productName, currentStock);
                };
                productElement.appendChild(alertButton);
              }
            } else {
              // Si el stock no es bajo, eliminamos la advertencia y el botón si existen
              if (existingWarning) existingWarning.remove();
              if (existingButton) existingButton.remove();
            }
          }
        });
      }
    });

    // Función mejorada para enviar alerta
    function sendAlert(productName, stockLevel) {
      const alertData = {
        productName: productName,
        stockLevel: stockLevel,
        localFrom: window.location.pathname.includes('local1') ? 'Local 1' : 'Local 2',
        timestamp: new Date().toISOString() // Agregar una marca de tiempo
      };

      socket.emit('send-alert-to-local2', alertData);

      // Mostrar mensaje de envío en proceso
      showNotification('Enviando alerta por email...', 'info');
    }

    // Escuchar respuesta del servidor sobre el envío del email
    socket.on('alert-email-status', function (response) {
      if (response.success) {
        showNotification('Alerta enviada correctamente por email', 'success');
      } else {
        showNotification('Error al enviar la alerta por email', 'error');
      }
    });

    // Función auxiliar para mostrar notificaciones
    function showNotification(message, type = 'info', duration = 5000) {
      // Verificar si ya existe el contenedor de notificaciones
      let notifContainer = document.getElementById('notification-container');

      if (!notifContainer) {
        notifContainer = document.createElement('div');
        notifContainer.id = 'notification-container';
        notifContainer.style.position = 'fixed';
        notifContainer.style.top = '10px';
        notifContainer.style.right = '10px';
        notifContainer.style.zIndex = '9999';
        document.body.appendChild(notifContainer);
      }

      // Crear la notificación
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.innerHTML = `
    <div style="padding: 15px; margin-bottom: 10px; border-radius: 4px; background-color: ${type === 'success' ? '#d4edda' :
          type === 'error' ? '#f8d7da' :
            type === 'warning' ? '#fff3cd' : '#cce5ff'
        }; color: ${type === 'success' ? '#155724' :
          type === 'error' ? '#721c24' :
            type === 'warning' ? '#856404' : '#004085'
        }; border: 1px solid ${type === 'success' ? '#c3e6cb' :
          type === 'error' ? '#f5c6cb' :
            type === 'warning' ? '#ffeeba' : '#b8daff'
        };">
      ${message}
      <span style="float: right; cursor: pointer; font-weight: bold;" onclick="this.parentElement.parentElement.remove();">&times;</span>
    </div>
  `;

      notifContainer.appendChild(notification);

      // Eliminar después del tiempo especificado
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, duration);
    }


    // Variables globales para el pago
    let currentPaymentMethod = null;
    let paymentAmounts = {
      efectivo: 0,
      transferencia: 0
    };

    // Funciones para el modal de pago
    function showPaymentModal() {
      const modal = document.getElementById('paymentModal');
      const total = document.getElementById('cart-total').textContent;
      document.getElementById('modalTotal').textContent = total;
      document.getElementById('remainingAmount').textContent = total;
      modal.style.display = 'block';
      currentPaymentMethod = null;
      paymentAmounts = { efectivo: 0, transferencia: 0 };
      updatePaymentInputs();
    }

    function closePaymentModal() {
      document.getElementById('paymentModal').style.display = 'none';
      document.getElementById('printOrderBtn').style.display = 'none';
    }

    function selectPaymentMethod(method) {
      currentPaymentMethod = method;
      updatePaymentInputs();
    }

    function updatePaymentInputs() {
      const container = document.getElementById('paymentInputs');
      const total = parseFloat(document.getElementById('modalTotal').textContent).toFixed(2); // Formatear el total a 2 decimales
      container.innerHTML = '';

      if (!currentPaymentMethod) return;

      if (currentPaymentMethod === 'mixto') {
        container.innerHTML = `
      <div class="payment-input">
        <label>Monto en efectivo:</label>
        <input type="number" id="cashAmount" step="0.01" value="" onchange="updateRemainingAmount()">
      </div>
      <div class="payment-input">
        <label>Monto transferencia:</label>
        <input type="number" id="transferAmount" step="0.01" value="" onchange="updateRemainingAmount()">
      </div>
    `;
      } else {
        container.innerHTML = `
      <div class="payment-input">
        <label>Monto ${currentPaymentMethod}:</label>
        <input type="number" id="singleAmount" step="0.01" value="" onchange="updateRemainingAmount()">
      </div>
    `;
      }

      // Agregar los listeners de entrada para formatear automáticamente los valores con 2 decimales
      addInputListeners();
    }

    function updateRemainingAmount() {
      const total = parseFloat(document.getElementById('modalTotal').textContent);
      let paid = 0;

      if (currentPaymentMethod === 'mixto') {
        const cashAmount = parseFloat(document.getElementById('cashAmount').value) || 0;
        const transferAmount = parseFloat(document.getElementById('transferAmount').value) || 0;
        paid = cashAmount + transferAmount;
        paymentAmounts.efectivo = cashAmount;
        paymentAmounts.transferencia = transferAmount;
      } else {
        paid = parseFloat(document.getElementById('singleAmount').value) || 0;
        paymentAmounts[currentPaymentMethod] = paid;
      }

      const remaining = total - paid;
      document.getElementById('remainingAmount').textContent = remaining.toFixed(2);
      document.getElementById('processPaymentBtn').disabled = remaining !== 0;
    }

    // Función para procesar el pago
    function processPayment() {
      const orderName = document.getElementById('orderName').value;

      // Crear el objeto de datos del pedido
      const orderData = {
        date: new Date().toISOString(),
        items: cart,
        total: parseFloat(document.getElementById('modalTotal').textContent),
        paymentMethod: currentPaymentMethod,
        paymentAmounts: paymentAmounts,
        local: window.location.pathname.includes('local1') ? 'local1' : 'local2',
        orderName: orderName, // Nombre del cliente
        seller: selectedSeller // Nombre del vendedor seleccionado
      };

      // Enviar al servidor
      socket.emit('process-order', orderData);

      // Limpiar el carrito en la interfaz de usuario
      cart = []; // Limpiar el carrito local
      updateCartUI(); // Actualizar la interfaz de usuario

      // Mostrar botón de impresión
      const printOrderBtn = document.getElementById('printOrderBtn');
      printOrderBtn.style.display = 'block';

      // Deshabilitar el botón de procesar pago
      document.getElementById('processPaymentBtn').disabled = true;

      // Configurar el evento de impresión y pasar directamente el objeto orderData
      printOrderBtn.onclick = () => printOrder(orderData);
    }

    // Función mejorada para imprimir el pedido
    function printOrder(orderData) {
      const date = new Date(orderData.date).toLocaleString();

      // Verificar explícitamente los valores
      const clientName = orderData.orderName ? orderData.orderName : 'No especificado';
      const vendorName = orderData.sellerName ? orderData.sellerName : 'No especificado';

      console.log("Imprimiendo - Nombre del cliente:", clientName);
      console.log("Imprimiendo - Nombre del vendedor:", vendorName);

      let paymentDetails = '';

      if (orderData.paymentMethod === 'mixto') {
        paymentDetails = `
      <p>Pago en efectivo: $${orderData.paymentAmounts.efectivo.toFixed(2)}</p>
      <p>Pago por transferencia: $${orderData.paymentAmounts.transferencia.toFixed(2)}</p>
    `;
      } else {
        paymentDetails = `
      <p>Pago por ${orderData.paymentMethod}: $${orderData.total.toFixed(2)}</p>
    `;
      }

      const printContent = `
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body {
                font-family: Arial, sans-serif;
                padding: 20px;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
            }
            th, td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }
            th {
                background-color: #f2f2f2;
            }
            .total {
                font-weight: bold;
                font-size: 1.2em;
                margin-top: 20px;
            }
            .payment-info {
                margin-top: 20px;
                padding: 10px;
                border: 1px solid #ddd;
                background-color: #f9f9f9;
            }
        </style>
    </head>
    <body>
        <h2>Comprobante de Pago</h2>
        <p>Fecha: ${date}</p>
        <p>Nombre del cliente: ${clientName}</p>
        <p>Vendedor: ${vendorName}</p>
        <table>
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio Unit.</th>
                    <th>Subtotal</th>
                </tr>
            </thead>
            <tbody>
                ${orderData.items.map(item => `
                    <tr>
                        <td>${item.name}</td>
                        <td>${item.quantity}</td>
                        <td>$${item.price.toFixed(2)}</td>
                        <td>$${(item.price * item.quantity).toFixed(2)}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        
        <div class="total">
            Total: $${orderData.total.toFixed(2)}
        </div>
        
        <div class="payment-info">
            <h3>Información de Pago</h3>
            <p>Método de pago: ${orderData.paymentMethod}</p>
            ${paymentDetails}
        </div>
    </body>
    </html>
  `;

      // Abrir ventana de impresión
      const printWindow = window.open('', '_blank');
      printWindow.document.write(printContent);
      printWindow.document.close();

      // Esperar a que el contenido se cargue antes de imprimir
      printWindow.onload = function () {
        printWindow.print();
        // printWindow.close(); // Opcional: cerrar la ventana después de imprimir
      };
    }

    // Evento para el botón de impresión cuando se carga la página
    document.addEventListener('DOMContentLoaded', function () {
      const printOrderBtn = document.getElementById('printOrderBtn');
      if (printOrderBtn) {
        printOrderBtn.addEventListener('click', () => {
          // Este evento solo debería usarse si no se ha llamado a processPayment primero
          // De lo contrario, el evento onclick ya estará configurado

          // Si necesitamos recrear los datos del pedido
          if (!lastOrderData) {
            const orderName = document.getElementById('orderName').value;
            const sellerName = document.getElementById('sellerName').value;

            const orderData = {
              date: new Date().toISOString(),
              items: cart,
              total: parseFloat(document.getElementById('modalTotal').textContent),
              paymentMethod: currentPaymentMethod,
              paymentAmounts: paymentAmounts,
              orderName: orderName,
              sellerName: sellerName
            };

            printOrder(orderData);
          }
        });
      }
    });


    function generateOrderPrintContent() {
      const date = new Date().toLocaleDateString();
      const items = cart.map(item =>
        `<tr>
  <td>${item.name}</td>
  <td>${item.quantity}</td>
  <td>$${item.price}</td>
  <td>$${(item.price * item.quantity).toFixed(2)}</td>
</tr>`
      ).join('');

      return `
<!DOCTYPE html>
<html>
<head>
  <style>
    body { font-family: Arial; }
    table { width: 100%; border-collapse: collapse; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    .total { font-weight: bold; }
  </style>
</head>
<body>
  <h2>Pedido - ${date}</h2>
  <table>
    <tr>
      <th>Producto</th>
      <th>Cantidad</th>
      <th>Precio Unit.</th>
      <th>Subtotal</th>
    </tr>
    ${items}
  </table>
  <p class="total">Total: $${document.getElementById('modalTotal').textContent}</p>
  <p>Método de pago: ${currentPaymentMethod}</p>
  <p>Efectivo: $${paymentAmounts.efectivo}</p>
  <p>Transferencia: $${paymentAmounts.transferencia}</p>
</body>
</html>
`;
    }

    // Funciones para el historial
    function showHistory() {
      const modal = document.getElementById('historyModal');
      modal.style.display = 'block';
      loadHistory();
    }

    function closeHistoryModal() {
      document.getElementById('historyModal').style.display = 'none';
    }

    function loadHistory() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2'; // Determinar el local actual
      const date = document.getElementById('filterDate').value; // Obtener la fecha del filtro (si existe)
      socket.emit('get-order-history', { local, date }); // Enviar el local y la fecha al servidor
    }

    function filterHistory() {
      const date = document.getElementById('filterDate').value;
      socket.emit('get-order-history', date);
    }

    socket.on('order-history', function (history) {
      const container = document.getElementById('historyContainer');
      container.innerHTML = '';

      history.forEach(order => {
        const orderElement = document.createElement('div');
        orderElement.className = 'order-card';
        orderElement.innerHTML = `
  <p>Fecha: ${new Date(order.date).toLocaleString()}</p>
  <p>Nombre del pedido: ${order.orderName}</p>
  <p>Vendedor: ${order.sellerName}</p> <!-- Mostrar el nombre del vendedor -->
  <p>Total: $${order.total}</p>
  <p>Método de pago: ${order.paymentMethod}</p>
  <button onclick='printSingleOrder(${JSON.stringify(order)})'>Imprimir</button>
`;
        container.appendChild(orderElement);
      });
    });

    function printHistory() {
      const historyContent = document.getElementById('historyContainer').innerHTML;
      const printWindow = window.open('', '_blank');
      printWindow.document.write(`
<!DOCTYPE html>
<html>
<head>
  <style>
    body { font-family: Arial; }
    .order-card { border: 1px solid #ddd; padding: 10px; margin: 10px 0; }
  </style>
</head>
<body>
  <h2>Historial de Pedidos</h2>
  ${historyContent}
</body>
</html>
`);
      printWindow.document.close();
      printWindow.print();
    }

    function printSingleOrder(order) {
      const printWindow = window.open('', '_blank');
      printWindow.document.write(generateOrderPrintContent(order));
      printWindow.document.close();
      printWindow.print();
    }

    function toggleForm() {
      let form = document.getElementById("productForm");
      let button = document.getElementById("toggleFormButton");

      if (form.classList.contains("show")) {
        form.classList.remove("show");
        setTimeout(() => {
          form.style.display = "none";
        }, 300); // Espera a que termine la animación antes de ocultar
        button.textContent = "Mostrar Formulario";
      } else {
        form.style.display = "block";
        setTimeout(() => {
          form.classList.add("show");
        }, 10); // Pequeño delay para que el fade-in funcione bien
        button.textContent = "Ocultar Formulario";
      }
    }

    // Función para cargar las categorías
    function loadCategories() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      fetch(`/get-categories/${local}`)
        .then(response => response.json())
        .then(categories => {
          const categoryFilter = document.getElementById('categoryFilter');
          categoryFilter.innerHTML = '<option value="Todas">Todas las Categorías</option>';

          categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
          });
        })
        .catch(error => console.error('Error al cargar las categorías:', error));
    }

    // Llamar a la función cuando la página cargue
    document.addEventListener('DOMContentLoaded', loadCategories);

    // Función para filtrar productos por categoría
    function filterProductsByCategory() {
      const selectedCategory = document.getElementById('categoryFilter').value;
      const productList = document.getElementById('product-list');
      const products = productList.querySelectorAll('.product-item');

      products.forEach(product => {
        const productCategory = product.querySelector('p:nth-child(3)').textContent.replace('Categoría: ', '').trim();
        if (selectedCategory === 'Todas' || productCategory === selectedCategory) {
          product.style.display = 'block'; // Mostrar el producto
        } else {
          product.style.display = 'none'; // Ocultar el producto
        }
      });
    }

    function saveProduct() {
      const productId = document.getElementById('editProductId').value;
      const product = {
        name: document.getElementById('name').value,
        category: document.getElementById('category').value,
        price: parseFloat(document.getElementById('price').value),
        stock: parseInt(document.getElementById('stock').value),
        description: document.getElementById('description').value
      };

      const url = productId ?
        `/update-product/local1/${productId}` :
        `/add-product/local1`;

      fetch(url, {
        method: productId ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(product)
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al guardar el producto');
          return response.json();
        })
        .then(() => {
          resetForm();
          loadCategories(); // Recargar las categorías
          location.reload(); // Recargar la página para actualizar la lista de productos
        })
        .catch(error => {
          document.getElementById('formError').textContent = error.message;
          document.getElementById('formError').style.display = 'block';
        });
    }

    function closeCashRegister() {
      const closeData = {
        date: new Date().toISOString(),
        totalPayments: totalPayments,
        totalAmount: totalAmount,
        local: window.location.pathname.includes('local1') ? 'local1' : 'local2'
      };

      // Enviar al servidor para guardar el cierre de caja
      socket.emit('close-cash-register', closeData);

      // Reiniciar los contadores
      totalPayments = 0;
      totalAmount = 0;

      // Mostrar un mensaje de éxito
      alert(`Cierre de caja realizado:
    - Pagos procesados: ${closeData.totalPayments}
    - Monto total: $${closeData.totalAmount.toFixed(2)}`);
    }

    socket.on('update-cash-register-history', (history) => {
      const historyContainer = document.getElementById('cash-register-history');
      historyContainer.innerHTML = '';

      history.forEach((entry, index) => {
        const entryElement = document.createElement('div');
        entryElement.className = 'cash-register-entry';
        entryElement.innerHTML = `
      <p><strong>Cierre #${index + 1}</strong></p>
      <p>Fecha: ${new Date(entry.date).toLocaleString()}</p>
      <p>Pagos procesados: ${entry.totalPayments}</p>
      <p>Monto total: $${entry.totalAmount.toFixed(2)}</p>
      <hr>
    `;
        historyContainer.appendChild(entryElement);
      });
    });

    function loadCashRegisterHistory() {
      // Solicitar el historial de cierres de caja al servidor
      socket.emit('get-cash-register-history');
    }

    socket.on('update-cash-register-history', (history) => {
      const historyContainer = document.getElementById('cash-register-history');
      historyContainer.innerHTML = '';

      history.forEach((entry, index) => {
        const entryElement = document.createElement('div');
        entryElement.className = 'cash-register-entry';
        entryElement.innerHTML = `
      <p><strong>Cierre #${index + 1}</strong></p>
      <p>Fecha: ${new Date(entry.date).toLocaleString()}</p>
      <p>Pagos procesados: ${entry.totalPayments}</p>
      <p>Monto total: $${entry.totalAmount.toFixed(2)}</p>
      <p><strong>Local:</strong> ${entry.local}</p>
      <hr>
    `;
        historyContainer.appendChild(entryElement);
      });
    });
    // Función para abrir el modal del historial de cierres de caja
    function showCashRegisterHistoryModal() {
      const modal = document.getElementById('cashRegisterHistoryModal');
      modal.style.display = 'block';
      loadCashRegisterHistory(); // Cargar el historial al abrir el modal
    }

    // Función para cerrar el modal del historial de cierres de caja
    function closeCashRegisterHistoryModal() {
      const modal = document.getElementById('cashRegisterHistoryModal');
      modal.style.display = 'none';
    }
    function printCashRegisterHistory() {
      const historyContent = document.getElementById('cash-register-history').innerHTML;
      const printWindow = window.open('', '_blank');
      printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .total { font-weight: bold; font-size: 1.2em; margin-top: 20px; }
        .payment-info { margin-top: 20px; padding: 10px; border: 1px solid #ddd; background-color: #f9f9f9; }
      </style>
    </head>
    <body>
      <h2>Historial de Cierres de Caja</h2>
      ${historyContent}
    </body>
    </html>
  `);
      printWindow.document.close();
      printWindow.print();
    }


    document.addEventListener('DOMContentLoaded', function () {
      loadSellerInfo();
    });
  </script>
</body>

</html>