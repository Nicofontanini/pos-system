<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin</title>
    <link rel="stylesheet" href="/styles/base.css">
    <link rel="stylesheet" href="/styles/styles.css">
</head>

<body>
    <style>
        .pos-container {
            grid-template-columns: 100% 0%;
        }
    </style>
    <header class="header">
        <h1>Admin - Empanadas KM11</h1>
        <div class="header-actions">
            <button onclick="window.location.href='/logout'">Cerrar Sesión</button>
            <button id="fullscreenBtn">[ ]</button>
        </div>
        <div class="header-actions">
            <!-- Botón para el dropdown -->
            <div class="dropdown">
                <button class="dropbtn">Acciones</button>
                <div class="dropdown-content">
                    <button onclick="showEmployeeLogHistory()">Ver Historial de Asistencia</button>
                    <button onclick="showHistory()" class="history-button">Historial de Pedidos</button>
                    <button onclick="showCashRegisterHistoryModal()" class="btn-mostrarFormulario">Consultar Historial
                        de
                        Cierres</button>
                </div>
            </div>
        </div>
    </header>


    <!-- Formulario para agregar/editar productos -->
    <button id="toggleFormButton" onclick="toggleForm()" class="btn-mostrarFormulario">Mostrar Formulario</button>
    <div class="product-form" id="productForm">
        <h3 id="formTitle">Agregar Nuevo Producto</h3>
        <input type="hidden" id="editProductId">
        <div>
            <label for="name">Nombre:</label>
            <input type="text" id="name" required>
        </div>
        <div>
            <label for="category">Categoría:</label>
            <input type="text" id="category" required>
        </div>
        <div>
            <label for="price">Precio:</label>
            <input type="number" id="price" min="0" step="0.01" required>
        </div>
        <div>
            <label for="stock">Stock:</label>
            <input type="number" id="stock" min="0" required>
        </div>
        <div>
            <label for="description">Descripción:</label>
            <input type="text" id="description" required>
        </div>
        <div class="actions">
            <button onclick="saveProduct()" class="btn-guardar">Guardar</button>
            <button onclick="cancelEdit()" id="cancelButton" style="display: none;"
                class="btn-cancelar">Cancelar</button>
        </div>
        <div id="formError" class="error-message"></div>
    </div>

    <!-- Sección de Productos -->
    <main class="pos-container">
        <section class="products-section">
            <h2>Productos Disponibles</h2>
            <!-- Selector de categorías -->
            <select id="categoryFilter" onchange="filterProductsByCategory()" class="select">
                <option value="Todas">Todas las Categorías</option>
                <!-- Las opciones de categorías se generarán dinámicamente con JavaScript -->
            </select>

            <ul id="product-list">
                <% products.forEach(product=> { %>
                    <li id="product-<%= product.id %>" class="product-item">
                        <div class="product-detail">
                            <h3>
                                <%= product.name %>
                            </h3>
                            <p>
                                <%= product.description %>
                            </p>
                            <p>Categoría: <%= product.category %>
                            </p>
                            <p>Stock: <span id="stock-<%= product.id %>">
                                    <%= product.stock %>
                                </span></p>
                            <p>Precio: $<%= product.price %>
                            </p>
                        </div>
                        <div class="actions">
                            <button onclick="editProduct(<%= JSON.stringify(product) %>)"
                                class="edit-button">Editar</button>
                            <button onclick="confirmDelete(<%= product.id %>)" class="delete-button">Eliminar</button>

                            <div class="transfer-form">
                                <label>Transferir a Foodtruck:</label>
                                <input type="number" id="quantity-<%= product.id %>" min="1" max="<%= product.stock %>"
                                    value="0">
                                <button onclick="transferStock(<%= product.id %>)">Transferir</button>
                                <div id="error-<%= product.id %>" class="error-message"></div>
                            </div>
                        </div>

                        <div id="delete-confirm-<%= product.id %>" class="delete-confirm" style="display: none;">
                            ¿Está seguro de eliminar este producto?
                            <button onclick="deleteProduct(<%= product.id %>)">Sí, eliminar</button>
                            <button onclick="cancelDelete(<%= product.id %>)">Cancelar</button>
                        </div>
                    </li>
                    <% }) %>
            </ul>
        </section>
        <!-- Modal de Pago -->
        <div id="historyModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeHistoryModal()">&times;</span>
                <h2>Historial de Pedidos</h2>
                <label>Fecha Unica:</label>
                <input type="date" id="filterDate" onchange="filterHistory()">
                <div class="date-range-filter">
                    <label for="startDate">Desde:</label>
                    <input type="date" id="startDate">

                    <label for="endDate">Hasta:</label>
                    <input type="date" id="endDate">

                    <button onclick="filterHistoryByDateRange()">Filtrar</button>
                </div>
                <div id="historyContainer" class="history-container"></div>
                <button onclick="printHistory()" class="print-button">Imprimir Historial</button>
                <button onclick="downloadExcel()" class="print-button">Descargar Excel</button> <!-- Botón nuevo -->
            </div>
        </div>
    </main>

    <!-- Modal para el historial de cierres de caja -->
    <div id="cashRegisterHistoryModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeCashRegisterHistoryModal()">&times;</span>
            <h2>Historial de Cierres de Caja</h2>
            <div id="cash-register-history" class="history-container"></div>
            <button onclick="printCashRegisterHistory()" class="print-button">Imprimir Historial</button>
            <button onclick="downloadCashRegisterExcel()" class="print-button">Descargar Excel</button>
            <!-- Botón nuevo -->
        </div>
    </div>

    <!-- Modal para ver historial -->
    <div id="employeeLogHistoryModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEmployeeLogHistoryModal()">&times;</span>
            <h2>Historial de Ingresos/Egresos</h2>

            <div class="filter-section">
                <div>
                    <label>Desde:</label>
                    <input type="date" id="logStartDate">
                </div>
                <div>
                    <label>Hasta:</label>
                    <input type="date" id="logEndDate">
                </div>
                <div>
                    <label>Empleado:</label>
                    <input type="text" id="logEmployeeFilter" placeholder="Filtrar por nombre">
                </div>
                <button onclick="filterEmployeeLogs()">Filtrar</button>
            </div>

            <div id="employeeLogsContainer" class="history-container"></div>
            <button onclick="downloadEmployeeLogsExcel()" class="print-button">Descargar Excel</button>
        </div>
    </div>
    <script src="/scripts/opencloseModal.js" defer></script>
    <script src="/scripts/dropdown.js" defer></script>
    <script src="/scripts/fullscreenBtn.js" defer></script>
    <script src="/scripts/closeboxConfirme.js" defer></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        function toggleForm() {
            let form = document.getElementById("productForm");
            let button = document.getElementById("toggleFormButton");

            if (form.classList.contains("show")) {
                form.classList.remove("show");
                setTimeout(() => {
                    form.style.display = "none";
                }, 300); // Espera a que termine la animación antes de ocultar
                button.textContent = "Mostrar Formulario";
            } else {
                form.style.display = "block";
                setTimeout(() => {
                    form.classList.add("show");
                }, 10); // Pequeño delay para que el fade-in funcione bien
                button.textContent = "Ocultar Formulario";
            }
        }

        // Función para cargar las categorías
        function loadCategories() {
            const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
            fetch(`/get-categories/${local}`)
                .then(response => response.json())
                .then(categories => {
                    const categoryFilter = document.getElementById('categoryFilter');
                    categoryFilter.innerHTML = '<option value="Todas">Todas las Categorías</option>';

                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category;
                        option.textContent = category;
                        categoryFilter.appendChild(option);
                    });
                })
                .catch(error => console.error('Error al cargar las categorías:', error));
        }

        // Llamar a la función cuando la página cargue
        document.addEventListener('DOMContentLoaded', loadCategories);

        // Función para filtrar productos por categoría
        function filterProductsByCategory() {
            const selectedCategory = document.getElementById('categoryFilter').value;
            const productList = document.getElementById('product-list');
            const products = productList.querySelectorAll('.product-item');

            products.forEach(product => {
                const productCategory = product.querySelector('p:nth-child(3)').textContent.replace('Categoría: ', '').trim();
                if (selectedCategory === 'Todas' || productCategory === selectedCategory) {
                    product.style.display = 'block'; // Mostrar el producto
                } else {
                    product.style.display = 'none'; // Ocultar el producto
                }
            });
        }

        // CRUD Operations
        function saveProduct() {
            const productId = document.getElementById('editProductId').value;
            const product = {
                name: document.getElementById('name').value,
                category: document.getElementById('category').value,
                price: parseFloat(document.getElementById('price').value),
                stock: parseInt(document.getElementById('stock').value),
                description: document.getElementById('description').value
            };

            const url = productId ?
                `/update-product/local2/${productId}` :
                `/add-product/local2`;

            fetch(url, {
                method: productId ? 'PUT' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(product)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Error al guardar el producto');
                    return response.json();
                })
                .then(() => {
                    resetForm();
                    // La actualización de la UI se maneja a través de Socket.IO
                })
                .catch(error => {
                    document.getElementById('formError').textContent = error.message;
                    document.getElementById('formError').style.display = 'block';
                });
        }

        function editProduct(product) {
            document.getElementById('formTitle').textContent = 'Editar Producto';
            document.getElementById('editProductId').value = product.id;
            document.getElementById('name').value = product.name;
            document.getElementById('category').value = product.category;
            document.getElementById('price').value = product.price;
            document.getElementById('stock').value = product.stock;
            document.getElementById('description').value = product.description;
            document.getElementById('cancelButton').style.display = 'inline';

            document.getElementById('productForm').scrollIntoView({ behavior: 'smooth' });
        }

        function confirmDelete(productId) {
            document.getElementById(`delete-confirm-${productId}`).style.display = 'block';
        }

        function deleteProduct(productId) {
            fetch(`/delete-product/local2/${productId}`, {
                method: 'DELETE'
            })
                .then(response => {
                    if (!response.ok) throw new Error('Error al eliminar el producto');
                    // La actualización de la UI se maneja a través de Socket.IO
                })
                .catch(error => {
                    alert(error.message);
                });
        }

        function cancelDelete(productId) {
            document.getElementById(`delete-confirm-${productId}`).style.display = 'none';
        }

        function cancelEdit() {
            resetForm();
        }

        function resetForm() {
            document.getElementById('formTitle').textContent = 'Agregar Nuevo Producto';
            document.getElementById('editProductId').value = '';
            document.getElementById('productForm').reset();
            document.getElementById('cancelButton').style.display = 'none';
            document.getElementById('formError').style.display = 'none';
        }

        function transferStock(productId) {
            const quantity = document.getElementById(`quantity-${productId}`).value;
            const errorDiv = document.getElementById(`error-${productId}`);

            fetch('/transfer-stock', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId,
                    quantity: parseInt(quantity),
                    fromLocation: 'local2',
                    toLocation: 'local1'
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error en la transferencia');
                    }
                    return response.text();
                })
                .then(() => {
                    errorDiv.style.display = 'none';
                })
                .catch(error => {
                    errorDiv.textContent = error.message;
                    errorDiv.style.display = 'block';
                });
        }

        // Socket event listeners
        socket.on('product-added', function (data) {
            if (data.location === 'local2') {
                location.reload();
            }
        });

        socket.on('product-updated', function (data) {
            if (data.location === 'local2') {
                location.reload();
            }
        });

        socket.on('product-deleted', function (data) {
            if (data.location === 'local2') {
                const element = document.getElementById(`product-${data.productId}`);
                if (element) element.remove();
            }
        });

        socket.on('stock-update', function (data) {
            if (data.sourceLocation === 'local2') {
                const stockElement = document.getElementById(`stock-${data.productId}`);
                if (stockElement) {
                    stockElement.textContent = data.sourceStock;
                    // Update max quantity in input
                    const quantityInput = document.getElementById(`quantity-${data.productId}`);
                    quantityInput.max = data.sourceStock;
                    if (parseInt(quantityInput.value) > data.sourceStock) {
                        quantityInput.value = data.sourceStock;
                    }
                }
            }
        });

        // Funciones para el historial
        function showHistory() {
            const modal = document.getElementById('historyModal');
            modal.style.display = 'block';
            loadHistory();
        }

        function closeHistoryModal() {
            document.getElementById('historyModal').style.display = 'none';
        }

        function loadHistory() {
            const local = window.location.pathname.includes('local1') ? 'local1' : 'local2'; // Determinar el local actual
            const date = document.getElementById('filterDate').value; // Obtener la fecha del filtro (si existe)
            socket.emit('get-order-history', { local, date }); // Enviar el local y la fecha al servidor
        }
        function filterHistoryByDateRange() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            if (!startDate || !endDate) {
                alert('Por favor selecciona fechas de inicio y fin');
                return;
            }

            socket.emit('get-order-history-range', {
                local: currentLocal,
                startDate: startDate,
                endDate: endDate
            });
        }

        function filterHistory() {
            const dateInput = document.getElementById('filterDate');
            const date = dateInput.value;

            if (!date) {
                console.error('No se ha seleccionado fecha');
                return;
            }

            socket.emit('get-order-history', { local: currentLocal, date: date });
        }

        socket.on('order-history', function (history) {
            const container = document.getElementById('historyContainer');
            container.innerHTML = '';

            history.forEach(order => {
                const orderElement = document.createElement('div');
                orderElement.className = 'order-card';
                orderElement.innerHTML = `
      <p>Fecha: ${new Date(order.date).toLocaleString()}</p>
      <p>Nombre del pedido: ${order.orderName}</p> <!-- Nombre del pedido -->
      <p>Vendedor: ${order.sellerName}</p> <!-- Mostrar el nombre del vendedor -->
      <p>Total: $${order.total}</p>
      <p>Método de pago: ${order.paymentMethod}</p>
      <button onclick='printSingleOrder(${JSON.stringify(order)})'>Imprimir</button>
    `;
                container.appendChild(orderElement);
            });
        });

        function printHistory() {
            const historyContent = document.getElementById('historyContainer').innerHTML;
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
     <link rel="stylesheet" href="/styles/base.css">
    </head>
    <body>
      <h2>Historial de Pedidos</h2>
      ${historyContent}
    </body>
    </html>
  `);
            printWindow.document.close();
            printWindow.print();
        }

        function printSingleOrder(order) {
            const printWindow = window.open('', '_blank');
            printWindow.document.write(generateOrderPrintContent(order));
            printWindow.document.close();
            printWindow.print();
        }




        socket.on('update-cash-register-history', (history) => {
            const historyContainer = document.getElementById('cash-register-history');
            historyContainer.innerHTML = '';

            history.forEach((entry, index) => {
                const entryElement = document.createElement('div');
                entryElement.className = 'cash-register-entry';
                entryElement.innerHTML = `
      <p><strong>Cierre #${index + 1}</strong></p>
      <p>Fecha: ${new Date(entry.date).toLocaleString()}</p>
      <p>Pagos procesados: ${entry.totalPayments}</p>
      <p>Monto total: $${entry.totalAmount.toFixed(2)}</p>
      <hr>
    `;
                historyContainer.appendChild(entryElement);
            });
        });

        function loadCashRegisterHistory() {
            // Solicitar el historial de cierres de caja al servidor
            socket.emit('get-cash-register-history');
        }

        // Actualizar la función que muestra el historial
        socket.on('update-cash-register-history', (history) => {
            const historyContainer = document.getElementById('cash-register-history');
            historyContainer.innerHTML = '';

            // Ordenar del más reciente al más antiguo
            history.reverse().forEach((entry, index) => {
                const entryElement = document.createElement('div');
                entryElement.className = 'cash-register-entry';

                // Formatear fechas
                const closeTime = new Date(entry.closeTime);
                const startTime = new Date(entry.startTime);
                const formattedCloseTime = closeTime.toLocaleDateString() + ' ' + closeTime.toLocaleTimeString();
                const formattedStartTime = startTime.toLocaleDateString() + ' ' + startTime.toLocaleTimeString();

                // Crear resumen de productos con stock
                let productsHTML = `
      <h4>Productos Vendidos (${entry.productSummary.length}):</h4>
      <table class="summary-table">
        <tr>
          <th>Producto</th>
          <th>Precio</th>
          <th>Vendidos</th>
          <th>Stock Inicial</th>
          <th>Stock Restante</th>
          <th>Total</th>
        </tr>
    `;

                entry.productSummary.forEach(product => {
                    productsHTML += `
        <tr>
          <td>${product.name}</td>
          <td>$${product.price.toFixed(2)}</td>
          <td>${product.quantitySold}</td>
          <td>${product.initialStock}</td>
          <td class="${product.remainingStock <= 5 ? 'low-stock' : ''}">${product.remainingStock}</td>
          <td>$${product.totalSold.toFixed(2)}</td>
        </tr>
      `;
                });

                productsHTML += '</table>';

                // Crear resumen de pagos detallado
                let paymentsHTML = `
      <h4>Métodos de Pago:</h4>
      <table class="payment-table">
        <tr>
          <th>Método</th>
          <th>Monto</th>
          <th>% del Total</th>
        </tr>
        <tr>
          <td>Efectivo</td>
          <td>$${entry.paymentSummary.efectivo.toFixed(2)}</td>
          <td>${((entry.paymentSummary.efectivo / entry.paymentSummary.total) * 100).toFixed(1)}%</td>
        </tr>
        <tr>
          <td>Transferencia</td>
          <td>$${entry.paymentSummary.transferencia.toFixed(2)}</td>
          <td>${((entry.paymentSummary.transferencia / entry.paymentSummary.total) * 100).toFixed(1)}%</td>
        </tr>
        <tr>
          <td>Mixto</td>
          <td>$${entry.paymentSummary.mixto.toFixed(2)}</td>
          <td>${((entry.paymentSummary.mixto / entry.paymentSummary.total) * 100).toFixed(1)}%</td>
        </tr>
        <tr class="total-row">
          <td><strong>TOTAL</strong></td>
          <td><strong>$${entry.paymentSummary.total.toFixed(2)}</strong></td>
          <td>100%</td>
        </tr>
      </table>
    `;

                entryElement.innerHTML = `
      <div class="entry-header">
        <h3>Cierre #${history.length - index} - ${formattedCloseTime}</h3>
        <p><strong>Local:</strong> ${entry.local.toUpperCase()}</p>
        <p><strong>Período:</strong> ${formattedStartTime} a ${formattedCloseTime}</p>
        <p><strong>Total Ventas:</strong> $${entry.paymentSummary.total.toFixed(2)}</p>
        <p><strong>Pedidos Procesados:</strong> ${entry.ordersCount}</p>
      </div>
      <div class="entry-details">
        <button class="toggle-details" onclick="toggleDetails(this)">Mostrar Detalles</button>
        <div class="details-content" style="display:none;">
          ${productsHTML}
          ${paymentsHTML}
          <h4>Pedidos incluidos (${entry.orders.length}):</h4>
          <table class="orders-table">
            <tr>
              <th>ID</th>
              <th>Nombre</th>
              <th>Vendedor</th>
              <th>Total</th>
              <th>Método</th>
            </tr>
            ${entry.orders.map(order => `
              <tr>
                <td>${order.id}</td>
                <td>${order.orderName || 'Sin nombre'}</td>
                <td>${order.sellerName || 'Sin vendedor'}</td>
                <td>$${order.total.toFixed(2)}</td>
                <td>${order.paymentMethod}</td>
              </tr>
            `).join('')}
          </table>
        </div>
      </div>
      <hr>
    `;

                historyContainer.appendChild(entryElement);
            });
        });

        // Función para mostrar/ocultar detalles
        function toggleDetails(button) {
            const details = button.nextElementSibling;
            if (details.style.display === 'none') {
                details.style.display = 'block';
                button.textContent = 'Ocultar Detalles';
            } else {
                details.style.display = 'none';
                button.textContent = 'Mostrar Detalles';
            }
        }
        // Función para abrir el modal del historial de cierres de caja
        function showCashRegisterHistoryModal() {
            const modal = document.getElementById('cashRegisterHistoryModal');
            modal.style.display = 'block';
            loadCashRegisterHistory(); // Cargar el historial al abrir el modal
        }

        // Función para cerrar el modal del historial de cierres de caja
        function closeCashRegisterHistoryModal() {
            const modal = document.getElementById('cashRegisterHistoryModal');
            modal.style.display = 'none';
        }
        function printCashRegisterHistory() {
            const historyContent = document.getElementById('cash-register-history').innerHTML;
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
    <link rel="stylesheet" href="/styles/base.css">
    </head>
    <body>
      <h2>Historial de Cierres de Caja</h2>
      ${historyContent}
    </body>
    </html>
  `);
            printWindow.document.close();
            printWindow.print();
        }

        document.addEventListener('DOMContentLoaded', function () {
            loadSellerInfo();
        });

        function downloadCashRegisterExcel() {
            const historyContainer = document.getElementById('cash-register-history');
            const entries = Array.from(historyContainer.querySelectorAll('.cash-register-entry'));

            const data = entries.map(entry => {
                const entryText = entry.textContent;
                const date = entry.querySelector('.entry-header h3').textContent.split(' - ')[1].trim();
                const local = entry.querySelector('.entry-header p:nth-child(2)').textContent.replace('Local: ', '').trim();
                const total = entry.querySelector('.entry-header p:nth-child(3)').textContent.replace('Total Ventas: $', '').trim();
                const ordersCount = entry.querySelector('.entry-header p:nth-child(4)').textContent.replace('Pedidos Procesados: ', '').trim();

                // Obtener detalles de productos si están visibles
                let productsInfo = '';
                const productsTable = entry.querySelector('.summary-table');
                if (productsTable) {
                    const rows = Array.from(productsTable.querySelectorAll('tr'));
                    productsInfo = rows.slice(1).map(row => {
                        const cells = Array.from(row.querySelectorAll('td'));
                        return `${cells[0].textContent}: ${cells[2].textContent} x $${cells[1].textContent} = $${cells[3].textContent}`;
                    }).join('; ');
                }

                return {
                    'Cierre': entry.querySelector('.entry-header h3').textContent.split(' - ')[0].trim(),
                    'Fecha': date,
                    'Local': local,
                    'Total Ventas': total,
                    'Pedidos Procesados': ordersCount,
                    'Productos Vendidos': productsInfo
                };
            });

            // Crear hoja de cálculo
            const worksheet = XLSX.utils.json_to_sheet(data);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Cierres de Caja');

            // Generar archivo
            const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

            // Descargar
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'historial_cierres_caja_detallado.xlsx';
            link.click();
            URL.revokeObjectURL(url);
        }

        function downloadExcel() {
            // Obtener los datos del historial de pedidos
            const historyContainer = document.getElementById('historyContainer');
            const orders = Array.from(historyContainer.querySelectorAll('.order-card'));

            // Crear un array de objetos con los datos
            const data = orders.map(order => {
                // Obtener el texto completo de la fecha
                const fullDateText = order.querySelector('p:nth-child(1)').textContent.replace('Fecha: ', '');

                // Separar la fecha y la hora manualmente
                let dateOnly = '';
                let timeOnly = '';

                try {
                    // Intenta crear un objeto Date
                    const dateObj = new Date(fullDateText);

                    // Verifica si la fecha es válida
                    if (!isNaN(dateObj.getTime())) {
                        // Si es válida, extrae fecha y hora
                        dateOnly = dateObj.toLocaleDateString();
                        timeOnly = dateObj.toLocaleTimeString();
                    } else {
                        // Si no es válida, intenta dividir manualmente
                        const parts = fullDateText.split(', ');
                        if (parts.length === 2) {
                            dateOnly = parts[0];
                            timeOnly = parts[1];
                        } else {
                            // Si falla, usa el texto completo como fecha
                            dateOnly = fullDateText;
                        }
                    }
                } catch (e) {
                    console.error("Error al procesar la fecha:", fullDateText, e);
                    // En caso de error, usar el texto original
                    dateOnly = fullDateText;
                }

                return {
                    Fecha: dateOnly,
                    Hora: timeOnly,
                    'Nombre del Pedido': order.querySelector('p:nth-child(2)').textContent.replace('Nombre del pedido: ', ''),
                    Vendedor: order.querySelector('p:nth-child(3)').textContent.replace('Vendedor: ', ''),
                    Total: order.querySelector('p:nth-child(4)').textContent.replace('Total: $', ''),
                    'Método de Pago': order.querySelector('p:nth-child(5)').textContent.replace('Método de pago: ', '')
                };
            });

            // Crear una hoja de cálculo
            const worksheet = XLSX.utils.json_to_sheet(data);

            // Crear un libro de trabajo y agregar la hoja
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Historial de Pedidos');

            // Generar el archivo Excel
            const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

            // Crear un enlace de descarga
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'historial_pedidos.xlsx';
            link.click();

            // Liberar el objeto URL
            URL.revokeObjectURL(url);
        }

        // Función para mostrar el historial
        function showEmployeeLogHistory() {
            document.getElementById('employeeLogHistoryModal').style.display = 'block';
            loadEmployeeLogs();
        }

        function closeEmployeeLogHistoryModal() {
            document.getElementById('employeeLogHistoryModal').style.display = 'none';
        }

        // Función para cargar los logs
        function loadEmployeeLogs() {
            const startDate = document.getElementById('logStartDate').value;
            const endDate = document.getElementById('logEndDate').value;
            const employeeName = document.getElementById('logEmployeeFilter').value;

            let url = '/get-employee-logs?';
            if (startDate) url += `startDate=${startDate}&`;
            if (endDate) url += `endDate=${endDate}&`;
            if (employeeName) url += `employeeName=${employeeName}&`;

            fetch(url)
                .then(response => response.json())
                .then(logs => {
                    const container = document.getElementById('employeeLogsContainer');
                    container.innerHTML = '';

                    if (logs.length === 0) {
                        container.innerHTML = '<p>No se encontraron registros</p>';
                        return;
                    }

                    logs.forEach(log => {
                        const logElement = document.createElement('div');
                        logElement.className = `log-entry ${log.action}`;

                        const date = new Date(log.timestamp);

                        logElement.innerHTML = `
          <div class="log-entry-info">
            <strong>${log.employeeName}</strong> - ${log.action === 'ingreso' ? 'Ingresó' : 'Salió'}
            <div class="log-entry-time">
              ${date.toLocaleDateString()} ${date.toLocaleTimeString()} - ${log.local}
            </div>
          </div>
        `;

                        container.appendChild(logElement);
                    });
                });
        }

        // Función para filtrar
        function filterEmployeeLogs() {
            loadEmployeeLogs();
        }

        // Función para descargar Excel
        function downloadEmployeeLogsExcel() {
            const startDate = document.getElementById('logStartDate').value;
            const endDate = document.getElementById('logEndDate').value;
            const employeeName = document.getElementById('logEmployeeFilter').value;

            let url = '/get-employee-logs?';
            if (startDate) url += `startDate=${startDate}&`;
            if (endDate) url += `endDate=${endDate}&`;
            if (employeeName) url += `employeeName=${employeeName}&`;

            fetch(url)
                .then(response => response.json())
                .then(logs => {
                    // Preparar datos para Excel
                    const data = logs.map(log => {
                        const date = new Date(log.timestamp);
                        return {
                            'Nombre': log.employeeName,
                            'Acción': log.action === 'ingreso' ? 'Ingreso' : 'Egreso',
                            'Fecha': date.toLocaleDateString(),
                            'Hora': date.toLocaleTimeString(),
                            'Local': log.local,
                            'Fecha Completa': log.timestamp
                        };
                    });

                    // Crear hoja de cálculo
                    const worksheet = XLSX.utils.json_to_sheet(data);
                    const workbook = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(workbook, worksheet, 'Registros');

                    // Generar archivo
                    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
                    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

                    // Descargar
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;

                    // Nombre del archivo con fechas si hay filtro
                    let fileName = 'registros_empleados';
                    if (startDate || endDate) {
                        fileName += `_${startDate || 'inicio'}_${endDate || 'hoy'}`;
                    }
                    fileName += '.xlsx';

                    link.download = fileName;
                    link.click();
                    URL.revokeObjectURL(url);
                });
        }

        // Escuchar actualizaciones en tiempo real
        socket.on('employee-log-updated', function (newLog) {
            // Si el modal de historial está abierto, actualizar
            if (document.getElementById('employeeLogHistoryModal').style.display === 'block') {
                loadEmployeeLogs();
            }
        });

        function getSellerName(seller) {
            if (!seller) return null;
            return typeof seller === 'object' ? seller.name : seller;
        }

        socket.on('sellers-updated', (sellers) => {
            const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
            const localSellers = sellers[local];

            for (let i = 1; i <= 4; i++) {
                const button = document.getElementById(`seller${i}`);
                if (button) {
                    const seller = localSellers[`vendedor${i}`];
                    const sellerName = seller ? (typeof seller === 'object' ? seller.name : seller) : 'Vacío';
                    button.textContent = sellerName;
                    button.disabled = sellerName === 'Vacío';
                }
            }
        });

        // Cargar vendedores al inicio
        fetch('/get-current-sellers')
            .then(response => response.json())
            .then(sellers => {
                const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
                const localSellers = sellers[local];

                for (let i = 1; i <= 4; i++) {
                    const button = document.getElementById(`seller${i}`);
                    if (button) {
                        const seller = localSellers[`vendedor${i}`];
                        const sellerName = seller ? (typeof seller === 'object' ? seller.name : seller) : 'Vacío';
                        button.textContent = sellerName;
                        button.disabled = sellerName === 'Vacío';
                    }
                }
            })
            .catch(error => console.error('Error loading sellers:', error));

        socket.on('sellers-updated', (sellers) => {
            const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
            const localSellers = sellers[local];

            // Actualizar los botones de vendedor
            for (let i = 1; i <= 4; i++) {
                const button = document.getElementById(`seller${i}`);
                if (button) {
                    const sellerName = getSellerName(localSellers[`vendedor${i}`]);
                    button.textContent = sellerName || 'Vacío';
                    button.disabled = !sellerName;
                }
            }
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
</body>

</html>