<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cocina KM11</title>
  <link rel="stylesheet" href="/styles/base.css">
  <link rel="stylesheet" href="/styles/styles.css">
  <link rel="stylesheet" href="/styles/styles2.css">
</head>

<body>

  <header class="header">
    <h1>Cocina - Empanadas KM11</h1>
    <div class="header-actions">
      <button onclick="window.location.href='/logout'">Cerrar Sesión</button>
      <button id="fullscreenBtn">[ ]</button>
    </div>
    <div class="header-actions">
      <!-- Botón para el dropdown -->
      <div class="dropdown">
        <button class="dropbtn">Acciones</button>
        <div class="dropdown-content">
          <!-- Botones dentro del dropdown -->
          <button onclick="showEmployeeLogModal()">Registrar Ingreso/Egreso</button>
          <!-- <button onclick="showEmployeeLogHistory()">Ver Historial de Asistencia</button> -->
          <button onclick="showHistory()" class="history-button">Historial de Pedidos</button>
          <button onclick="confirmCloseCashRegister()" class="btn-mostrarFormulario">Cierre de Caja</button>
          <!-- <button onclick="showCashRegisterHistoryModal()" class="btn-mostrarFormulario">Consultar Historial de
            Cierres</button> -->
        </div>
      </div>
    </div>
  </header>


  <!-- Formulario para agregar/editar productos -->
  <button id="toggleFormButton" onclick="toggleForm()" class="btn-mostrarFormulario">Mostrar Formulario</button>
  <div class="product-form" id="productForm">
    <h3 id="formTitle">Agregar Nuevo Producto</h3>
    <input type="hidden" id="editProductId">
    <div>
      <label for="name">Nombre:</label>
      <input type="text" id="name" required>
    </div>
    <div>
      <label for="category">Categoría:</label>
      <input type="text" id="category" required>
    </div>
    <div>
      <label for="price">Precio:</label>
      <input type="number" id="price" min="0" step="0.01" required>
    </div>
    <div>
      <label for="stock">Stock:</label>
      <input type="number" id="stock" min="0" required>
    </div>
    <div>
      <label for="description">Descripción:</label>
      <input type="text" id="description" required>
    </div>
    <div class="actions">
      <button onclick="saveProduct()" class="btn-guardar">Guardar</button>
      <button onclick="cancelEdit()" id="cancelButton" style="display: none;" class="btn-cancelar">Cancelar</button>
    </div>
    <div id="formError" class="error-message"></div>
  </div>

  <!-- Alertas recibidas desde Local 1 -->
  <div id="alert-message" class="alert" style="display: none;"></div>

  <!-- Sección de Productos -->
  <main class="pos-container">
    <section class="products-section">
      <h2>Productos Disponibles</h2>
      <!-- Selector de categorías -->
      <select id="categoryFilter" onchange="filterProductsByCategory()" class="select">
        <option value="Todas">Todas las Categorías</option>
        <!-- Las opciones de categorías se generarán dinámicamente con JavaScript -->
      </select>

      <ul id="product-list">
        <% products.forEach(product=> { %>
          <li id="product-<%= product.id %>" class="product-item">
            <div class="product-detail">
              <h3>
                <%= product.name %>
              </h3>
              <p>
                <%= product.description %>
              </p>
              <p>Categoría: <%= product.category %>
              </p>
              <p>Stock: <span id="stock-<%= product.id %>">
                  <%= product.stock %>
                </span></p>
              <p>Precio: $<%= product.price %>
              </p>
            </div>
            <div class="actions">
              <button onclick="editProduct(<%= JSON.stringify(product) %>)" class="edit-button">Editar</button>
              <button onclick="confirmDelete(<%= product.id %>)" class="delete-button">Eliminar</button>
              <button style="width: 30%;"
                onclick="addToCart(<%= product.id %>, '<%= product.name %>', <%= product.price %>)"
                class="add-button">Agregar</button>


              <div class="transfer-form">
                <label>Transferir a Foodtruck:</label>
                <input type="number" id="quantity-<%= product.id %>" min="1" max="<%= product.stock %>" value="0">
                <button onclick="transferStock(<%= product.id %>)">Transferir</button>
                <div id="error-<%= product.id %>" class="error-message"></div>
              </div>
            </div>

            <div id="delete-confirm-<%= product.id %>" class="delete-confirm" style="display: none;">
              ¿Está seguro de eliminar este producto?
              <button onclick="deleteProduct(<%= product.id %>)">Sí, eliminar</button>
              <button onclick="cancelDelete(<%= product.id %>)">Cancelar</button>
            </div>
          </li>
          <% }) %>
      </ul>
    </section>

    <!-- Modal de Pago -->
    <section class="cart-section">
      <!-- Modal de Pago -->
      <div id="paymentModal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Procesar Pago</h2>
          <div class="payment-summary">
            <p>Total a pagar: $<span id="modalTotal">0.00</span></p>
            <p>Restante: $<span id="remainingAmount" class="remaining-amount">0.00</span></p>
          </div>

          <!-- Campo para el nombre del pedido -->
          <div class="payment-input">
            <label>Nombre del pedido:</label>
            <input type="text" id="orderName" placeholder="Ingrese el nombre">
          </div>

          <!-- Botones para seleccionar el vendedor -->
          <div class="payment-options">
            <button id="seller1" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller2" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller3" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
            <button id="seller4" onclick="selectSeller(this.textContent)" class="cart-item">Vacío</button>
          </div>

          <div class="payment-options">
            <button onclick="selectPaymentMethod('efectivo')" class="cart-item">Efectivo</button>
            <button onclick="selectPaymentMethod('transferencia')" class="cart-item">Transferencia</button>
            <button onclick="selectPaymentMethod('tarjeta')" class="cart-item">Tarjeta</button>
            <button onclick="selectPaymentMethod('mixto')" class="cart-item">Mixto</button>
          </div>

          <div id="paymentInputs"></div>

          <button id="processPaymentBtn" class="cart-item" disabled>Procesar Pago</button>
          <button id="printOrderBtn" style="display: none;" class="cart-item">Imprimir Pedido</button>
          <!-- Botón para cerrar el modal -->
          <button id="closeModalBtn" class="cart-item" onclick="closeModal()">Cerrar</button>
        </div>
      </div>

      <!-- Modal de Historial -->
      <div id="historyModal" class="modal">
        <div class="modal-content">
          <span class="close" onclick="closeHistoryModal()">&times;</span>
          <h2>Historial de Pedidos</h2>
          <label>Fecha Unica:</label>
          <input type="date" id="filterDate" onchange="filterHistory()">
          <div class="date-range-filter">
            <label for="startDate">Desde:</label>
            <input type="date" id="startDate">

            <label for="endDate">Hasta:</label>
            <input type="date" id="endDate">

            <button onclick="filterHistoryByDateRange()">Filtrar</button>
          </div>
          <div id="historyContainer" class="history-container"></div>
          <button onclick="printHistory()" class="print-button">Imprimir Historial</button>
          <button onclick="downloadExcel()" class="print-button">Descargar Excel</button> <!-- Botón nuevo -->
        </div>
      </div>

      <!-- Sección del carrito -->
      <div class="cart" id="cart">
        <h2>Carrito de Compras</h2>
        <div id="cart-items"></div>
        <p>Total: $<span id="cart-total">0.00</span></p>
        <div class="cart-actions">
          <button onclick="showPaymentModal()" class="checkout-button" id="checkoutButton" disabled>
            Completar Compra
          </button>
        </div>
      </div>
    </section>
  </main>


  <!-- Modal para seleccionar empanadas -->
  <div id="docenaModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeDocenaModal()">&times;</span>
      <h2 id="docenaModalTitle"></h2>
      <div id="empanadasSelection"></div>
      <div class="modal-actions">
        <button onclick="confirmDocenaSelection()" style="padding: 10px;">Confirmar</button>
        <button onclick="closeDocenaModal()" style="padding: 10px;">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- Ingresos de empleados y egresos -->
  <div id="employeeLogModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeEmployeeLogModal()">&times;</span>
      <h2>Registro de Empleado</h2>
      <div>
        <label for="logEmployeeName">Nombre del Empleado:</label>
        <input type="text" id="logEmployeeName" placeholder="Ingrese el nombre">
      </div>
      <div class="log-actions">
        <button onclick="logEmployeeAction('ingreso')" class="log-button ingreso">Registrar Ingreso</button>
        <button onclick="logEmployeeAction('egreso')" class="log-button egreso">Registrar Egreso</button>
      </div>
    </div>
  </div>

  <script src="/scripts/opencloseModal.js" defer></script>
  <script src="/scripts/dropdown.js" defer></script>
  <script src="/scripts/fullscreenBtn.js" defer></script>
  <script src="/scripts/closeboxConfirme.js" defer></script>
  <script src="/scripts/EmployeeLogModal.js" defer></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    function toggleDocenaForm() {
      const form = document.getElementById('docenaForm');
      if (form.style.display === 'none' || !form.style.display) {
        form.style.display = 'block';
        loadEmpanadasForDocena(); // Cargar las empanadas disponibles
      } else {
        form.style.display = 'none';
      }
    }

    function loadEmpanadasForDocena() {
      const empanadasSelection = document.getElementById('empanadasSelection');
      empanadasSelection.innerHTML = ''; // Limpiar el contenedor

      // Obtener las empanadas disponibles (puedes obtenerlas desde tu inventario)
      const empanadas = [
        "Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza",
        "Carne Picante", "Choclo", "Salchicha Alemana", "Capresse",
        "Roquefort", "Vacio Provolone", "Chesse Burger", "Cordero",
        "Trucha", "Ciervo"
      ];

      // Generar las opciones de empanadas
      empanadas.forEach((empanada, index) => {
        const empanadaDiv = document.createElement('div');
        empanadaDiv.innerHTML = `
      <label>${empanada}:</label>
      <input type="number" id="empanada-${index}" min="0" value="0">
    `;
        empanadasSelection.appendChild(empanadaDiv);
      });
    }

    function saveDocena() {
      const docenaName = document.getElementById('docenaName').value;
      const docenaPrice = parseFloat(document.getElementById('docenaPrice').value);
      const docenaStock = parseInt(document.getElementById('docenaStock').value);
      const docenaDescription = document.getElementById('docenaDescription').value;

      // Obtener las cantidades de cada empanada
      const empanadasSelection = document.getElementById('empanadasSelection');
      const empanadasInputs = empanadasSelection.querySelectorAll('input[type="number"]');
      const empanadasDetails = [];

      empanadasInputs.forEach((input, index) => {
        const quantity = parseInt(input.value);
        if (quantity > 0) {
          empanadasDetails.push({
            name: input.previousElementSibling.textContent.replace(':', '').trim(),
            quantity: quantity
          });
        }
      });

      // Validar que se hayan seleccionado empanadas
      if (empanadasDetails.length === 0) {
        document.getElementById('docenaFormError').textContent = 'Debes seleccionar al menos una empanada.';
        document.getElementById('docenaFormError').style.display = 'block';
        return;
      }

      // Crear el objeto de la nueva docena
      const newDocena = {
        name: docenaName,
        category: "Docena",
        price: docenaPrice,
        stock: docenaStock,
        description: docenaDescription,
        details: empanadasDetails
      };

      // Enviar la nueva docena al servidor (usando Socket.IO o fetch)
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('add-docena', { local, docena: newDocena });

      // Limpiar el formulario
      cancelDocena();
      alert('Docena agregada correctamente.');
    }

    function cancelDocena() {
      document.getElementById('docenaForm').reset();
      document.getElementById('docenaFormError').style.display = 'none';
    }

    const docenas = {
      "Docena Tradicionales": ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana"],
      "Docena Especiales": ["4 Quesos", "Crudo", "Vegana", "Panceta y Ciruela", "J Roque"],
      "Docena Vacio": ["Vacio Provolone", "Chesse Burger"],
      "Docena Imperdibles": ["Cordero", "Trucha", "Ciervo"],
      "Docena Combinada 1": {
        tipo: "combinada",
        combinaciones: [
          { nombre: "Tradicionales", cantidad: 3, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana"] },
          { nombre: "Especiales", cantidad: 3, opciones: ["4 Quesos", "Crudo", "Vegana", "Panceta y Ciruela", "J Roque"] },
          { nombre: "Vacio", cantidad: 3, opciones: ["Vacio Provolone", "Chesse Burger"] },
          { nombre: "Imperdibles", cantidad: 3, opciones: ["Cordero", "Trucha", "Ciervo"] }
        ]
      },
      "Docena Combinada 2": {
        tipo: "combinada",
        combinaciones: [
          { nombre: "Tradicionales", cantidad: 4, opciones: ["Carne", "Pollo", "Verdura", "Cebolla", "Jamon", "Calabaza", "Picante", "Choclo", "Salchicha Alemana"] },
          { nombre: "Especiales", cantidad: 4, opciones: ["4 Quesos", "Crudo", "Vegana", "Panceta y Ciruela", "J Roque"] },
          { nombre: "Imperdibles", cantidad: 4, opciones: ["Cordero", "Trucha", "Ciervo"] }
        ]
      },
    };

    // Determinar el local actual
    const currentLocal = window.location.pathname.includes('local1') ? 'local1' : 'local2';
    let orderName = ''; // Variable para almacenar el nombre del pedido
    let selectedSeller = ''; // Variable para almacenar el vendedor seleccionado
    let totalPayments = 0; // Contador de pagos procesados
    let totalAmount = 0;   // Monto total generado


    // Función para cargar la información de los vendedores
    function loadSellerInfo() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      fetch('/get-sellers')
        .then(response => response.json())
        .then(data => {
          const sellerInfo = document.getElementById('sellerInfo');
          sellerInfo.innerHTML = `
        <p>Vendedor 1: ${data[local].vendedor1 ? data[local].vendedor1.name : 'No definido'} (Última actualización: ${data[local].vendedor1 ? new Date(data[local].vendedor1.updatedAt).toLocaleString() : 'N/A'})</p>
        <p>Vendedor 2: ${data[local].vendedor2 ? data[local].vendedor2.name : 'No definido'} (Última actualización: ${data[local].vendedor2 ? new Date(data[local].vendedor2.updatedAt).toLocaleString() : 'N/A'})</p>
        <p>Vendedor 3: ${data[local].vendedor3 ? data[local].vendedor3.name : 'No definido'} (Última actualización: ${data[local].vendedor3 ? new Date(data[local].vendedor3.updatedAt).toLocaleString() : 'N/A'})</p>
        <p>Vendedor 4: ${data[local].vendedor4 ? data[local].vendedor4.name : 'No definido'} (Última actualización: ${data[local].vendedor4 ? new Date(data[local].vendedor4.updatedAt).toLocaleString() : 'N/A'})</p>
      `;

          // Actualizar los botones del modal de pago
          for (let i = 1; i <= 4; i++) {
            const seller = data[local][`vendedor${i}`];
            const button = document.getElementById(`seller${i}`);
            if (button && seller) {
              const sellerName = typeof seller === 'object' ? seller.name : seller;
              button.textContent = sellerName;
              button.disabled = false;
            }
          }
        });
    }
    // Función para actualizar el nombre del vendedor
    function updateSeller() {
      const seller = document.getElementById('sellerSelect').value;
      const name = document.getElementById('sellerName').value;

      if (!name) {
        alert('Por favor, ingrese un nombre válido.');
        return;
      }

      fetch('/update-seller', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Local': currentLocal // Enviar el local actual
        },
        body: JSON.stringify({ seller, name })
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al actualizar el vendedor');
          closeSellerModal();
          loadSellerInfo();
          // Actualizar el nombre del vendedor en los botones del modal de pago
          if (seller === 'vendedor1') {
            document.getElementById('seller1Button').textContent = name;
          } else if (seller === 'vendedor2') {
            document.getElementById('seller2Button').textContent = name;
          }
        })
        .catch(error => {
          alert(error.message);
        });
    }

    // Escuchar el evento de actualización de vendedores
    socket.on('seller-updated', function (sellers) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const sellerInfo = document.getElementById('sellerInfo');
      sellerInfo.innerHTML = `
    <p>Vendedor 1: ${sellers[local].vendedor1 ? sellers[local].vendedor1.name : 'No definido'} (Última actualización: ${sellers[local].vendedor1 ? new Date(sellers[local].vendedor1.updatedAt).toLocaleString() : 'N/A'})</p>
    <p>Vendedor 2: ${sellers[local].vendedor2 ? sellers[local].vendedor2.name : 'No definido'} (Última actualización: ${sellers[local].vendedor2 ? new Date(sellers[local].vendedor2.updatedAt).toLocaleString() : 'N/A'})</p>
  `;

      // Actualizar los botones del modal de pago
      if (sellers[local].vendedor1) {
        document.getElementById('seller1Button').textContent = sellers[local].vendedor1.name;
      }
      if (sellers[local].vendedor2) {
        document.getElementById('seller2Button').textContent = sellers[local].vendedor2.name;
      }
    });
    // Función para seleccionar el vendedor
    function selectSeller(seller) {
      selectedSeller = seller;
      // alert(`Vendedor seleccionado: ${selectedSeller}`);
    }

    // Función para actualizar el nombre del pedido
    function updateOrderName() {
      orderName = document.getElementById('orderName').value;
    }

    // Escuchar el evento cart-updated
    socket.on('cart-updated', function ({ local, cart: updatedCart }) {
      // Solo actualizar si el carrito pertenece al local actual
      if (local === (window.location.pathname.includes('local1') ? 'local1' : 'local2')) {
        cart = updatedCart; // Actualizar el carrito local
        updateCartUI(); // Actualizar la interfaz
      }
    });

    // Función para agregar productos al carrito
    let currentDocena = null; // Variable para almacenar la docena seleccionada

    function addToCart(productId, productName, productPrice) {
      const docenaType = Object.keys(docenas).find(docena => productName.includes(docena));

      if (docenaType) {
        currentDocena = {
          id: productId,
          name: productName,
          price: productPrice,
          type: docenaType,
          config: docenas[docenaType]
        };

        openDocenaModal(currentDocena);
      } else {
        // Si no es una docena, agregar el producto normalmente
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: null
          }
        });
      }
    }

    function openDocenaModal(docena) {
      const modal = document.getElementById('docenaModal');
      const title = document.getElementById('docenaModalTitle');
      const selection = document.getElementById('empanadasSelection');

      title.textContent = `Seleccionar empanadas para ${docena.name}`;
      selection.innerHTML = '';

      if (docena.config.tipo === 'combinada') {
        // Si es una docena combinada, mostrar los grupos
        docena.config.combinaciones.forEach((grupo, grupoIndex) => {
          const grupoDiv = document.createElement('div');
          grupoDiv.className = 'grupo-empanadas';
          grupoDiv.innerHTML = `<h4>${grupo.nombre} (${grupo.cantidad} unidades)</h4>`;

          grupo.opciones.forEach((empanada, empanadaIndex) => {
            const empanadaDiv = document.createElement('div');
            empanadaDiv.className = 'empanada-item';
            empanadaDiv.innerHTML = `
          <span>${empanada}</span>
          <div>
            <button onclick="decrementEmpanada(${grupoIndex}, ${empanadaIndex})">-</button>
            <span id="empanada-${grupoIndex}-${empanadaIndex}-quantity">0</span>
            <button onclick="incrementEmpanada(${grupoIndex}, ${empanadaIndex}, ${grupo.cantidad})">+</button>
          </div>
        `;
            grupoDiv.appendChild(empanadaDiv);
          });

          selection.appendChild(grupoDiv);
        });
      } else {
        // Si es una docena normal, mostrar todas las empanadas
        docena.config.forEach((empanada, index) => {
          const empanadaDiv = document.createElement('div');
          empanadaDiv.className = 'empanada-item';
          empanadaDiv.innerHTML = `
        <span>${empanada}</span>
        <div>
          <button onclick="decrementEmpanada(0, ${index})">-</button>
          <span id="empanada-0-${index}-quantity">0</span>
          <button onclick="incrementEmpanada(0, ${index}, 12)">+</button>
        </div>
      `;
          selection.appendChild(empanadaDiv);
        });
      }

      modal.style.display = 'block';
    }

    function closeDocenaModal() {
      document.getElementById('docenaModal').style.display = 'none';
      currentDocena = null;
    }

    function incrementEmpanada(grupoIndex, empanadaIndex, maxQuantity) {
      const quantityElement = document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`);
      let quantity = parseInt(quantityElement.textContent);

      // Verificar que no se exceda la cantidad máxima permitida
      const totalSelected = getTotalSelectedForGroup(grupoIndex);
      if (totalSelected < maxQuantity) {
        quantity += 1;
        quantityElement.textContent = quantity;
      } else {
        alert(`No puedes seleccionar más de ${maxQuantity} unidades en este grupo.`);
      }
    }

    function decrementEmpanada(grupoIndex, empanadaIndex) {
      const quantityElement = document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`);
      let quantity = parseInt(quantityElement.textContent);
      if (quantity > 0) {
        quantity -= 1;
        quantityElement.textContent = quantity;
      }
    }

    function getTotalSelectedForGroup(grupoIndex) {
      let total = 0;
      const grupoDiv = document.querySelectorAll(`#empanadasSelection .grupo-empanadas`)[grupoIndex];
      if (grupoDiv) {
        const quantityElements = grupoDiv.querySelectorAll('span[id$="-quantity"]');
        quantityElements.forEach(element => {
          total += parseInt(element.textContent);
        });
      }
      return total;
    }

    function confirmDocenaSelection() {
      const grupos = [];
      let isValid = true;

      if (currentDocena.config.tipo === 'combinada') {
        // Para docenas combinadas, validar cada grupo
        currentDocena.config.combinaciones.forEach((grupo, grupoIndex) => {
          const empanadas = [];
          let totalSelected = 0;

          grupo.opciones.forEach((empanada, empanadaIndex) => {
            const quantity = parseInt(document.getElementById(`empanada-${grupoIndex}-${empanadaIndex}-quantity`).textContent);
            if (quantity > 0) {
              empanadas.push({ name: empanada, quantity });
              totalSelected += quantity;
            }
          });

          if (totalSelected !== grupo.cantidad) {
            alert(`Debes seleccionar exactamente ${grupo.cantidad} unidades en el grupo "${grupo.nombre}".`);
            isValid = false;
          }

          grupos.push({
            grupo: grupo.nombre,
            empanadas: empanadas
          });
        });
      } else {
        // Para docenas normales, validar el total de empanadas
        const empanadas = [];
        let totalSelected = 0;

        currentDocena.config.forEach((empanada, index) => {
          const quantity = parseInt(document.getElementById(`empanada-0-${index}-quantity`).textContent);
          if (quantity > 0) {
            empanadas.push({ name: empanada, quantity });
            totalSelected += quantity;
          }
        });

        if (totalSelected !== 12) {
          alert('Debes seleccionar exactamente 12 empanadas.');
          isValid = false;
        }

        grupos.push({
          grupo: 'Docena',
          empanadas: empanadas
        });
      }

      if (isValid) {
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: currentDocena.id,
            name: currentDocena.name,
            price: currentDocena.price,
            quantity: 1,
            details: grupos.flatMap(g => g.empanadas),
            gruposDetalle: grupos // Mantener los grupos para mejor visualización
          }
        });
        closeDocenaModal();
      }
    }

    function handleRegularDocena(productId, productName, productPrice, empanadasDisponibles) {
      const empanadas = empanadasDisponibles.map(name => ({ name, quantity: 0 }));
      let totalSelected = 0;

      // Pedir al usuario que ingrese la cantidad de cada empanada
      while (totalSelected < 12) {
        let message = `Seleccione cuántas unidades de cada empanada desea para la ${productName} (total 12):\n`;
        empanadas.forEach((empanada, index) => {
          message += `${index + 1}. ${empanada.name}: ${empanada.quantity} unidades\n`;
        });
        message += `Total seleccionado: ${totalSelected}/12`;

        const input = prompt(message + "\n\nIngrese el número de la empanada y la cantidad (ej: 1 3):");

        if (input === null) {
          // Si el usuario cancela, salir del bucle
          break;
        }

        const [empanadaIndex, quantity] = input.split(" ").map(Number);
        if (
          empanadaIndex >= 1 &&
          empanadaIndex <= empanadas.length &&
          quantity >= 0 &&
          quantity <= 12 - totalSelected
        ) {
          empanadas[empanadaIndex - 1].quantity += quantity;
          totalSelected += quantity;
        } else {
          alert("Entrada inválida. Asegúrese de ingresar un número válido y una cantidad que no exceda las 12 unidades.");
        }
      }

      if (totalSelected === 12) {
        // Filtrar solo las empanadas con cantidad > 0
        const selectedEmpanadas = empanadas.filter(empanada => empanada.quantity > 0);

        // Agregar la docena al carrito con el detalle de las empanadas
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: selectedEmpanadas // Guardar el detalle de las empanadas
          }
        });
        alert(`${productName} agregada al carrito.`);
      } else {
        alert('No se completó la selección de la docena.');
      }
    }

    function handleCombinedDocena(productId, productName, productPrice, docenaConfig) {
      const combinaciones = docenaConfig.combinaciones;
      const detallesSeleccionados = [];
      let seleccionCompleta = true;

      // Recorrer cada subcategoría de la docena combinada
      for (const combinacion of combinaciones) {
        const empanadasDeCombinacion = obtenerEmpanadaDeCombinacion(
          combinacion.nombre,
          combinacion.opciones,
          combinacion.cantidad
        );

        // Si el usuario canceló la selección
        if (!empanadasDeCombinacion) {
          seleccionCompleta = false;
          break;
        }

        // Agregar el grupo a los detalles seleccionados
        detallesSeleccionados.push({
          grupo: combinacion.nombre,
          empanadas: empanadasDeCombinacion
        });
      }

      if (seleccionCompleta) {
        // Aplanar la selección para crear una lista única de empanadas
        const empanadasSeleccionadas = detallesSeleccionados.flatMap(grupo =>
          grupo.empanadas.map(emp => ({
            name: `${emp.name} (${grupo.grupo})`,
            quantity: emp.quantity
          }))
        );

        // Agregar la docena al carrito
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        socket.emit('add-to-cart', {
          local: local,
          product: {
            id: productId,
            name: productName,
            price: productPrice,
            quantity: 1,
            details: empanadasSeleccionadas,
            gruposDetalle: detallesSeleccionados // Mantener los grupos para mejor visualización
          }
        });
        alert(`${productName} agregada al carrito.`);
      } else {
        alert('No se completó la selección de la docena combinada.');
      }
    }

    function obtenerEmpanadaDeCombinacion(nombreGrupo, opcionesDisponibles, cantidadRequerida) {
      const empanadas = opcionesDisponibles.map(name => ({ name, quantity: 0 }));
      let totalSelected = 0;

      // Pedir al usuario que ingrese la cantidad de cada empanada
      while (totalSelected < cantidadRequerida) {
        let message = `Seleccione ${cantidadRequerida} empanadas de "${nombreGrupo}" (seleccionadas: ${totalSelected}/${cantidadRequerida}):\n`;
        empanadas.forEach((empanada, index) => {
          message += `${index + 1}. ${empanada.name}: ${empanada.quantity} unidades\n`;
        });

        const input = prompt(message + "\n\nIngrese el número de la empanada y la cantidad (ej: 1 2):");

        if (input === null) {
          // Si el usuario cancela, devolver null
          return null;
        }

        const [empanadaIndex, quantity] = input.split(" ").map(Number);
        if (
          empanadaIndex >= 1 &&
          empanadaIndex <= empanadas.length &&
          quantity >= 0 &&
          quantity <= cantidadRequerida - totalSelected
        ) {
          empanadas[empanadaIndex - 1].quantity += quantity;
          totalSelected += quantity;
        } else {
          alert(`Entrada inválida. Asegúrese de ingresar un número válido y una cantidad que no exceda las ${cantidadRequerida - totalSelected} unidades restantes.`);
        }
      }

      // Filtrar solo las empanadas con cantidad > 0
      return empanadas.filter(empanada => empanada.quantity > 0);
    }

    // Función para incrementar la cantidad de un producto
    function incrementProduct(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('increment-product', { local, productId });
    }

    // Función para decrementar la cantidad de un producto
    function decrementProduct(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('decrement-product', { local, productId });
    }

    // Función para eliminar un producto del carrito
    function removeFromCart(productId) {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      socket.emit('remove-from-cart', { local, productId });
    }

    // Función para actualizar la interfaz del carrito
    function updateCartUI() {
      const cartItemsElement = document.getElementById('cart-items');
      const cartTotalElement = document.getElementById('cart-total');
      const checkoutButton = document.getElementById('checkoutButton');

      cartItemsElement.innerHTML = ''; // Limpiar el carrito antes de actualizar
      let total = 0;

      // Recorrer los productos en el carrito
      cart.forEach((item) => {
        const itemElement = document.createElement('div');
        itemElement.className = 'cart-item';
        itemElement.innerHTML = `
      <p>${item.name} - $${item.price} x ${item.quantity}</p>
      <button onclick="decrementProduct(${item.id})">-</button>
      <span>${item.quantity}</span>
      <button onclick="incrementProduct(${item.id})">+</button>
      <button onclick="removeFromCart(${item.id})">Eliminar</button>
    `;
        cartItemsElement.appendChild(itemElement);
        total += item.price * item.quantity; // Calcular el total
      });

      cartTotalElement.textContent = total.toFixed(2); // Actualizar el total
      checkoutButton.disabled = cart.length === 0; // Habilitar/deshabilitar el botón de compra
    }

    // Script para manejar el carrito y el pago
    document.addEventListener('DOMContentLoaded', function () {
      // Botón de checkout
      const checkoutButton = document.getElementById('checkoutButton');
      const modal = document.getElementById('paymentModal');
      const closeBtn = modal.querySelector('.close');
      const processPaymentBtn = document.getElementById('processPaymentBtn');

      // Event Listeners
      checkoutButton.addEventListener('click', showPaymentModal);
      closeBtn.addEventListener('click', closePaymentModal);
      processPaymentBtn.addEventListener('click', processPayment);
    });

    function toggleForm() {
      let form = document.getElementById("productForm");
      let button = document.getElementById("toggleFormButton");

      if (form.classList.contains("show")) {
        form.classList.remove("show");
        setTimeout(() => {
          form.style.display = "none";
        }, 300); // Espera a que termine la animación antes de ocultar
        button.textContent = "Mostrar Formulario";
      } else {
        form.style.display = "block";
        setTimeout(() => {
          form.classList.add("show");
        }, 10); // Pequeño delay para que el fade-in funcione bien
        button.textContent = "Ocultar Formulario";
      }
    }

    // Función para cargar las categorías
    function loadCategories() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      fetch(`/get-categories/${local}`)
        .then(response => response.json())
        .then(categories => {
          const categoryFilter = document.getElementById('categoryFilter');
          categoryFilter.innerHTML = '<option value="Todas">Todas las Categorías</option>';

          categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
          });
        })
        .catch(error => console.error('Error al cargar las categorías:', error));
    }

    // Llamar a la función cuando la página cargue
    document.addEventListener('DOMContentLoaded', loadCategories);

    // Función para filtrar productos por categoría
    function filterProductsByCategory() {
      const selectedCategory = document.getElementById('categoryFilter').value;
      const productList = document.getElementById('product-list');
      const products = productList.querySelectorAll('.product-item');

      products.forEach(product => {
        const productCategory = product.querySelector('p:nth-child(3)').textContent.replace('Categoría: ', '').trim();
        if (selectedCategory === 'Todas' || productCategory === selectedCategory) {
          product.style.display = 'block'; // Mostrar el producto
        } else {
          product.style.display = 'none'; // Ocultar el producto
        }
      });
    }

    // CRUD Operations
    function saveProduct() {
      const productId = document.getElementById('editProductId').value;
      const product = {
        name: document.getElementById('name').value,
        category: document.getElementById('category').value,
        price: parseFloat(document.getElementById('price').value),
        stock: parseInt(document.getElementById('stock').value),
        description: document.getElementById('description').value
      };

      const url = productId ?
        `/update-product/local2/${productId}` :
        `/add-product/local2`;

      fetch(url, {
        method: productId ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(product)
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al guardar el producto');
          return response.json();
        })
        .then(() => {
          resetForm();
          // La actualización de la UI se maneja a través de Socket.IO
        })
        .catch(error => {
          document.getElementById('formError').textContent = error.message;
          document.getElementById('formError').style.display = 'block';
        });
    }

    function editProduct(product) {
      document.getElementById('formTitle').textContent = 'Editar Producto';
      document.getElementById('editProductId').value = product.id;
      document.getElementById('name').value = product.name;
      document.getElementById('category').value = product.category;
      document.getElementById('price').value = product.price;
      document.getElementById('stock').value = product.stock;
      document.getElementById('description').value = product.description;
      document.getElementById('cancelButton').style.display = 'inline';

      document.getElementById('productForm').scrollIntoView({ behavior: 'smooth' });
    }

    function confirmDelete(productId) {
      document.getElementById(`delete-confirm-${productId}`).style.display = 'block';
    }

    function deleteProduct(productId) {
      fetch(`/delete-product/local2/${productId}`, {
        method: 'DELETE'
      })
        .then(response => {
          if (!response.ok) throw new Error('Error al eliminar el producto');
          // La actualización de la UI se maneja a través de Socket.IO
        })
        .catch(error => {
          alert(error.message);
        });
    }

    function cancelDelete(productId) {
      document.getElementById(`delete-confirm-${productId}`).style.display = 'none';
    }

    function cancelEdit() {
      resetForm();
    }

    function resetForm() {
      document.getElementById('formTitle').textContent = 'Agregar Nuevo Producto';
      document.getElementById('editProductId').value = '';
      document.getElementById('productForm').reset();
      document.getElementById('cancelButton').style.display = 'none';
      document.getElementById('formError').style.display = 'none';
    }

    function transferStock(productId) {
      const quantity = document.getElementById(`quantity-${productId}`).value;
      const errorDiv = document.getElementById(`error-${productId}`);

      fetch('/transfer-stock', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productId,
          quantity: parseInt(quantity),
          fromLocation: 'local2',
          toLocation: 'local1'
        })
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Error en la transferencia');
          }
          return response.text();
        })
        .then(() => {
          errorDiv.style.display = 'none';
        })
        .catch(error => {
          errorDiv.textContent = error.message;
          errorDiv.style.display = 'block';
        });
    }

    // Socket event listeners
    socket.on('product-added', function (data) {
      if (data.location === 'local2') {
        location.reload();
      }
    });

    socket.on('product-updated', function (data) {
      if (data.location === 'local2') {
        location.reload();
      }
    });

    socket.on('product-deleted', function (data) {
      if (data.location === 'local2') {
        const element = document.getElementById(`product-${data.productId}`);
        if (element) element.remove();
      }
    });

    socket.on('stock-update', function (data) {
      if (data.sourceLocation === 'local2') {
        const stockElement = document.getElementById(`stock-${data.productId}`);
        if (stockElement) {
          stockElement.textContent = data.sourceStock;
          // Update max quantity in input
          const quantityInput = document.getElementById(`quantity-${data.productId}`);
          quantityInput.max = data.sourceStock;
          if (parseInt(quantityInput.value) > data.sourceStock) {
            quantityInput.value = data.sourceStock;
          }
        }
      }
    });

    socket.on('receive-alert-from-local1', function (alertMessage) {
      const alertDiv = document.getElementById('alert-message');

      // Verificar si alertMessage es un objeto
      if (typeof alertMessage === 'object' && alertMessage !== null) {
        const { productName, stockLevel, localFrom, timestamp } = alertMessage;
        const date = new Date(timestamp).toLocaleString();

        // Construir el mensaje
        const message = `¡Alerta de stock bajo! 
      Producto: ${productName}
      Stock Bajo,
      Local de origen: ${localFrom}
      Fecha: ${date}`;

        // Mostrar el mensaje en el alertDiv
        alertDiv.textContent = message;
      } else {
        // Si alertMessage no es un objeto, mostrarlo directamente
        alertDiv.textContent = alertMessage;
      }

      alertDiv.style.display = 'block';

      // Ocultar la alerta después de 60 segundos
      setTimeout(() => {
        alertDiv.style.display = 'none';
      }, 60000);
    });

    // Variables globales para el pago
    let currentPaymentMethod = null;
    let paymentAmounts = {
      efectivo: 0,
      transferencia: 0
    };

    // Funciones para el historial
    function showHistory() {
      const modal = document.getElementById('historyModal');
      modal.style.display = 'block';
      loadHistory();
    }

    function closeHistoryModal() {
      document.getElementById('historyModal').style.display = 'none';
    }

    function loadHistory() {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2'; // Determinar el local actual
      const date = document.getElementById('filterDate').value; // Obtener la fecha del filtro (si existe)
      socket.emit('get-order-history', { local, date }); // Enviar el local y la fecha al servidor
    }
    function filterHistoryByDateRange() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;

      if (!startDate || !endDate) {
        alert('Por favor selecciona fechas de inicio y fin');
        return;
      }

      socket.emit('get-order-history-range', {
        local: currentLocal,
        startDate: startDate,
        endDate: endDate
      });
    }

    function filterHistory() {
      const dateInput = document.getElementById('filterDate');
      const date = dateInput.value;

      if (!date) {
        console.error('No se ha seleccionado fecha');
        return;
      }

      socket.emit('get-order-history', { local: currentLocal, date: date });
    }

    socket.on('order-history', function (history) {
      const container = document.getElementById('historyContainer');
      container.innerHTML = '';

      history.forEach(order => {
        const orderElement = document.createElement('div');
        orderElement.className = 'order-card';
        orderElement.innerHTML = `
      <p>Fecha: ${new Date(order.date).toLocaleString()}</p>
      <p>Nombre del pedido: ${order.orderName}</p> <!-- Nombre del pedido -->
      <p>Vendedor: ${order.sellerName}</p> <!-- Mostrar el nombre del vendedor -->
      <p>Total: $${order.total}</p>
      <p>Método de pago: ${order.paymentMethod}</p>
      <button onclick='printSingleOrder(${JSON.stringify(order)})'>Imprimir</button>
    `;
        container.appendChild(orderElement);
      });
    });

    function printHistory() {
      const historyContent = document.getElementById('historyContainer').innerHTML;
      const printWindow = window.open('', '_blank');
      printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
     <link rel="stylesheet" href="/styles/base.css">
    </head>
    <body>
      <h2>Historial de Pedidos</h2>
      ${historyContent}
    </body>
    </html>
  `);
      printWindow.document.close();
      printWindow.print();
    }

    function printSingleOrder(order) {
      const printWindow = window.open('', '_blank');
      printWindow.document.write(generateOrderPrintContent(order));
      printWindow.document.close();
      printWindow.print();
    }


    function closeCashRegister() {
      const closeData = {
        date: new Date().toISOString(),
        totalPayments: totalPayments,
        totalAmount: totalAmount,
        local: window.location.pathname.includes('local1') ? 'local1' : 'local2'
      };

      // Enviar al servidor para guardar el cierre de caja
      socket.emit('close-cash-register', closeData);

      // Reiniciar los contadores
      totalPayments = 0;
      totalAmount = 0;

      // Mostrar un mensaje de éxito
      alert(`Cierre de caja realizado:
    - Pagos procesados: ${closeData.totalPayments}
    - Monto total: $${closeData.totalAmount.toFixed(2)}`);
    }

    // En el cliente (tu archivo HTML/JS)
    socket.on('cash-register-updated', function (updatedRegister) {
      totalPayments = updatedRegister.totalPayments;
      totalAmount = updatedRegister.totalAmount;
      console.log('Contadores reiniciados:', totalPayments, totalAmount);
    });

    socket.on('update-cash-register-history', (history) => {
      const historyContainer = document.getElementById('cash-register-history');
      historyContainer.innerHTML = '';

      history.forEach((entry, index) => {
        const entryElement = document.createElement('div');
        entryElement.className = 'cash-register-entry';
        entryElement.innerHTML = `
      <p><strong>Cierre #${index + 1}</strong></p>
      <p>Fecha: ${new Date(entry.date).toLocaleString()}</p>
      <p>Pagos procesados: ${entry.totalPayments}</p>
      <p>Monto total: $${entry.totalAmount.toFixed(2)}</p>
      <hr>
    `;
        historyContainer.appendChild(entryElement);
      });
    });


    // Función para registrar acción
    function logEmployeeAction(action) {
      const employeeName = document.getElementById('logEmployeeName').value;
      if (!employeeName) {
        alert('Por favor ingrese el nombre del empleado');
        return;
      }

      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';

      fetch('/log-employee', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Local': local
        },
        body: JSON.stringify({ employeeName, action })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert(`Registro de ${action} exitoso para ${employeeName}`);
            document.getElementById('logEmployeeName').value = '';
            closeEmployeeLogModal();
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al registrar la acción');
        });
    }

    // Función para cargar los logs
    function loadEmployeeLogs() {
      const startDate = document.getElementById('logStartDate').value;
      const endDate = document.getElementById('logEndDate').value;
      const employeeName = document.getElementById('logEmployeeFilter').value;

      let url = '/get-employee-logs?';
      if (startDate) url += `startDate=${startDate}&`;
      if (endDate) url += `endDate=${endDate}&`;
      if (employeeName) url += `employeeName=${employeeName}&`;

      fetch(url)
        .then(response => response.json())
        .then(logs => {
          const container = document.getElementById('employeeLogsContainer');
          container.innerHTML = '';

          if (logs.length === 0) {
            container.innerHTML = '<p>No se encontraron registros</p>';
            return;
          }

          logs.forEach(log => {
            const logElement = document.createElement('div');
            logElement.className = `log-entry ${log.action}`;

            const date = new Date(log.timestamp);

            logElement.innerHTML = `
          <div class="log-entry-info">
            <strong>${log.employeeName}</strong> - ${log.action === 'ingreso' ? 'Ingresó' : 'Salió'}
            <div class="log-entry-time">
              ${date.toLocaleDateString()} ${date.toLocaleTimeString()} - ${log.local}
            </div>
          </div>
        `;

            container.appendChild(logElement);
          });
        });
    }

    // Escuchar actualizaciones en tiempo real
    socket.on('employee-log-updated', function (newLog) {
      // Si el modal de historial está abierto, actualizar
      if (document.getElementById('employeeLogHistoryModal').style.display === 'block') {
        loadEmployeeLogs();
      }
    });

    function getSellerName(seller) {
      if (!seller) return null;
      return typeof seller === 'object' ? seller.name : seller;
    }

    socket.on('sellers-updated', (sellers) => {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const localSellers = sellers[local];

      for (let i = 1; i <= 4; i++) {
        const button = document.getElementById(`seller${i}`);
        if (button) {
          const seller = localSellers[`vendedor${i}`];
          const sellerName = seller ? (typeof seller === 'object' ? seller.name : seller) : 'Vacío';
          button.textContent = sellerName;
          button.disabled = sellerName === 'Vacío';
        }
      }
    });

    // Cargar vendedores al inicio
    fetch('/get-current-sellers')
      .then(response => response.json())
      .then(sellers => {
        const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
        const localSellers = sellers[local];

        for (let i = 1; i <= 4; i++) {
          const button = document.getElementById(`seller${i}`);
          if (button) {
            const seller = localSellers[`vendedor${i}`];
            const sellerName = seller ? (typeof seller === 'object' ? seller.name : seller) : 'Vacío';
            button.textContent = sellerName;
            button.disabled = sellerName === 'Vacío';
          }
        }
      })
      .catch(error => console.error('Error loading sellers:', error));

    socket.on('sellers-updated', (sellers) => {
      const local = window.location.pathname.includes('local1') ? 'local1' : 'local2';
      const localSellers = sellers[local];

      // Actualizar los botones de vendedor
      for (let i = 1; i <= 4; i++) {
        const button = document.getElementById(`seller${i}`);
        if (button) {
          const sellerName = getSellerName(localSellers[`vendedor${i}`]);
          button.textContent = sellerName || 'Vacío';
          button.disabled = !sellerName;
        }
      }
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
  <script src="/scripts/payment.js"></script>
</body>

</html>